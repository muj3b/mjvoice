program(1.0)
[buildInfo = dict<tensor<string, []>, tensor<string, []>>({{"coremlc-component-MIL", "3500.14.1"}, {"coremlc-version", "3500.32.1"}, {"coremltools-component-torch", "2.7.0"}, {"coremltools-source-dialect", "TorchScript"}, {"coremltools-version", "9.0b1"}})]
{
    func main<ios15>(tensor<fp32, [1, 4160]> audio_input, tensor<fp32, [1, 128]> cell_state, tensor<fp32, [1, 128]> hidden_state) {
            tensor<int32, [2]> initial_context_begin_0 = const()[name = tensor<string, []>("initial_context_begin_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [2]> initial_context_end_0 = const()[name = tensor<string, []>("initial_context_end_0"), val = tensor<int32, [2]>([1, 64])];
            tensor<bool, [2]> initial_context_end_mask_0 = const()[name = tensor<string, []>("initial_context_end_mask_0"), val = tensor<bool, [2]>([true, false])];
            tensor<string, []> audio_input_to_fp16_dtype_0 = const()[name = tensor<string, []>("audio_input_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 4160]> audio_input_to_fp16 = cast(dtype = audio_input_to_fp16_dtype_0, x = audio_input)[name = tensor<string, []>("cast_53")];
            tensor<fp16, [1, 64]> initial_context_cast_fp16 = slice_by_index(begin = initial_context_begin_0, end = initial_context_end_0, end_mask = initial_context_end_mask_0, x = audio_input_to_fp16)[name = tensor<string, []>("initial_context_cast_fp16")];
            tensor<int32, [2]> current_audio_begin_0 = const()[name = tensor<string, []>("current_audio_begin_0"), val = tensor<int32, [2]>([0, 64])];
            tensor<int32, [2]> current_audio_end_0 = const()[name = tensor<string, []>("current_audio_end_0"), val = tensor<int32, [2]>([1, 4160])];
            tensor<bool, [2]> current_audio_end_mask_0 = const()[name = tensor<string, []>("current_audio_end_mask_0"), val = tensor<bool, [2]>([true, true])];
            tensor<fp16, [1, 4096]> current_audio_cast_fp16 = slice_by_index(begin = current_audio_begin_0, end = current_audio_end_0, end_mask = current_audio_end_mask_0, x = audio_input_to_fp16)[name = tensor<string, []>("current_audio_cast_fp16")];
            tensor<int32, [2]> chunk_1_begin_0 = const()[name = tensor<string, []>("chunk_1_begin_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [2]> chunk_1_end_0 = const()[name = tensor<string, []>("chunk_1_end_0"), val = tensor<int32, [2]>([1, 512])];
            tensor<bool, [2]> chunk_1_end_mask_0 = const()[name = tensor<string, []>("chunk_1_end_mask_0"), val = tensor<bool, [2]>([true, false])];
            tensor<fp16, [1, 512]> chunk_1_cast_fp16 = slice_by_index(begin = chunk_1_begin_0, end = chunk_1_end_0, end_mask = chunk_1_end_mask_0, x = current_audio_cast_fp16)[name = tensor<string, []>("chunk_1_cast_fp16")];
            tensor<int32, []> var_38 = const()[name = tensor<string, []>("op_38"), val = tensor<int32, []>(1)];
            tensor<bool, []> input_1_interleave_0 = const()[name = tensor<string, []>("input_1_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 576]> input_1_cast_fp16 = concat(axis = var_38, interleave = input_1_interleave_0, values = (initial_context_cast_fp16, chunk_1_cast_fp16))[name = tensor<string, []>("input_1_cast_fp16")];
            tensor<int32, [2]> context_1_begin_0 = const()[name = tensor<string, []>("context_1_begin_0"), val = tensor<int32, [2]>([0, 448])];
            tensor<int32, [2]> context_1_end_0 = const()[name = tensor<string, []>("context_1_end_0"), val = tensor<int32, [2]>([1, 512])];
            tensor<bool, [2]> context_1_end_mask_0 = const()[name = tensor<string, []>("context_1_end_mask_0"), val = tensor<bool, [2]>([true, true])];
            tensor<fp16, [1, 64]> context_1_cast_fp16 = slice_by_index(begin = context_1_begin_0, end = context_1_end_0, end_mask = context_1_end_mask_0, x = chunk_1_cast_fp16)[name = tensor<string, []>("context_1_cast_fp16")];
            tensor<int32, [2]> chunk_3_begin_0 = const()[name = tensor<string, []>("chunk_3_begin_0"), val = tensor<int32, [2]>([0, 512])];
            tensor<int32, [2]> chunk_3_end_0 = const()[name = tensor<string, []>("chunk_3_end_0"), val = tensor<int32, [2]>([1, 1024])];
            tensor<bool, [2]> chunk_3_end_mask_0 = const()[name = tensor<string, []>("chunk_3_end_mask_0"), val = tensor<bool, [2]>([true, false])];
            tensor<fp16, [1, 512]> chunk_3_cast_fp16 = slice_by_index(begin = chunk_3_begin_0, end = chunk_3_end_0, end_mask = chunk_3_end_mask_0, x = current_audio_cast_fp16)[name = tensor<string, []>("chunk_3_cast_fp16")];
            tensor<int32, []> var_61 = const()[name = tensor<string, []>("op_61"), val = tensor<int32, []>(1)];
            tensor<bool, []> input_29_interleave_0 = const()[name = tensor<string, []>("input_29_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 576]> input_29_cast_fp16 = concat(axis = var_61, interleave = input_29_interleave_0, values = (context_1_cast_fp16, chunk_3_cast_fp16))[name = tensor<string, []>("input_29_cast_fp16")];
            tensor<int32, [2]> context_3_begin_0 = const()[name = tensor<string, []>("context_3_begin_0"), val = tensor<int32, [2]>([0, 448])];
            tensor<int32, [2]> context_3_end_0 = const()[name = tensor<string, []>("context_3_end_0"), val = tensor<int32, [2]>([1, 512])];
            tensor<bool, [2]> context_3_end_mask_0 = const()[name = tensor<string, []>("context_3_end_mask_0"), val = tensor<bool, [2]>([true, true])];
            tensor<fp16, [1, 64]> context_3_cast_fp16 = slice_by_index(begin = context_3_begin_0, end = context_3_end_0, end_mask = context_3_end_mask_0, x = chunk_3_cast_fp16)[name = tensor<string, []>("context_3_cast_fp16")];
            tensor<int32, [2]> chunk_5_begin_0 = const()[name = tensor<string, []>("chunk_5_begin_0"), val = tensor<int32, [2]>([0, 1024])];
            tensor<int32, [2]> chunk_5_end_0 = const()[name = tensor<string, []>("chunk_5_end_0"), val = tensor<int32, [2]>([1, 1536])];
            tensor<bool, [2]> chunk_5_end_mask_0 = const()[name = tensor<string, []>("chunk_5_end_mask_0"), val = tensor<bool, [2]>([true, false])];
            tensor<fp16, [1, 512]> chunk_5_cast_fp16 = slice_by_index(begin = chunk_5_begin_0, end = chunk_5_end_0, end_mask = chunk_5_end_mask_0, x = current_audio_cast_fp16)[name = tensor<string, []>("chunk_5_cast_fp16")];
            tensor<int32, []> var_84 = const()[name = tensor<string, []>("op_84"), val = tensor<int32, []>(1)];
            tensor<bool, []> input_57_interleave_0 = const()[name = tensor<string, []>("input_57_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 576]> input_57_cast_fp16 = concat(axis = var_84, interleave = input_57_interleave_0, values = (context_3_cast_fp16, chunk_5_cast_fp16))[name = tensor<string, []>("input_57_cast_fp16")];
            tensor<int32, [2]> context_5_begin_0 = const()[name = tensor<string, []>("context_5_begin_0"), val = tensor<int32, [2]>([0, 448])];
            tensor<int32, [2]> context_5_end_0 = const()[name = tensor<string, []>("context_5_end_0"), val = tensor<int32, [2]>([1, 512])];
            tensor<bool, [2]> context_5_end_mask_0 = const()[name = tensor<string, []>("context_5_end_mask_0"), val = tensor<bool, [2]>([true, true])];
            tensor<fp16, [1, 64]> context_5_cast_fp16 = slice_by_index(begin = context_5_begin_0, end = context_5_end_0, end_mask = context_5_end_mask_0, x = chunk_5_cast_fp16)[name = tensor<string, []>("context_5_cast_fp16")];
            tensor<int32, [2]> chunk_7_begin_0 = const()[name = tensor<string, []>("chunk_7_begin_0"), val = tensor<int32, [2]>([0, 1536])];
            tensor<int32, [2]> chunk_7_end_0 = const()[name = tensor<string, []>("chunk_7_end_0"), val = tensor<int32, [2]>([1, 2048])];
            tensor<bool, [2]> chunk_7_end_mask_0 = const()[name = tensor<string, []>("chunk_7_end_mask_0"), val = tensor<bool, [2]>([true, false])];
            tensor<fp16, [1, 512]> chunk_7_cast_fp16 = slice_by_index(begin = chunk_7_begin_0, end = chunk_7_end_0, end_mask = chunk_7_end_mask_0, x = current_audio_cast_fp16)[name = tensor<string, []>("chunk_7_cast_fp16")];
            tensor<int32, []> var_107 = const()[name = tensor<string, []>("op_107"), val = tensor<int32, []>(1)];
            tensor<bool, []> input_85_interleave_0 = const()[name = tensor<string, []>("input_85_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 576]> input_85_cast_fp16 = concat(axis = var_107, interleave = input_85_interleave_0, values = (context_5_cast_fp16, chunk_7_cast_fp16))[name = tensor<string, []>("input_85_cast_fp16")];
            tensor<int32, [2]> context_7_begin_0 = const()[name = tensor<string, []>("context_7_begin_0"), val = tensor<int32, [2]>([0, 448])];
            tensor<int32, [2]> context_7_end_0 = const()[name = tensor<string, []>("context_7_end_0"), val = tensor<int32, [2]>([1, 512])];
            tensor<bool, [2]> context_7_end_mask_0 = const()[name = tensor<string, []>("context_7_end_mask_0"), val = tensor<bool, [2]>([true, true])];
            tensor<fp16, [1, 64]> context_7_cast_fp16 = slice_by_index(begin = context_7_begin_0, end = context_7_end_0, end_mask = context_7_end_mask_0, x = chunk_7_cast_fp16)[name = tensor<string, []>("context_7_cast_fp16")];
            tensor<int32, [2]> chunk_9_begin_0 = const()[name = tensor<string, []>("chunk_9_begin_0"), val = tensor<int32, [2]>([0, 2048])];
            tensor<int32, [2]> chunk_9_end_0 = const()[name = tensor<string, []>("chunk_9_end_0"), val = tensor<int32, [2]>([1, 2560])];
            tensor<bool, [2]> chunk_9_end_mask_0 = const()[name = tensor<string, []>("chunk_9_end_mask_0"), val = tensor<bool, [2]>([true, false])];
            tensor<fp16, [1, 512]> chunk_9_cast_fp16 = slice_by_index(begin = chunk_9_begin_0, end = chunk_9_end_0, end_mask = chunk_9_end_mask_0, x = current_audio_cast_fp16)[name = tensor<string, []>("chunk_9_cast_fp16")];
            tensor<int32, []> var_130 = const()[name = tensor<string, []>("op_130"), val = tensor<int32, []>(1)];
            tensor<bool, []> input_113_interleave_0 = const()[name = tensor<string, []>("input_113_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 576]> input_113_cast_fp16 = concat(axis = var_130, interleave = input_113_interleave_0, values = (context_7_cast_fp16, chunk_9_cast_fp16))[name = tensor<string, []>("input_113_cast_fp16")];
            tensor<int32, [2]> context_9_begin_0 = const()[name = tensor<string, []>("context_9_begin_0"), val = tensor<int32, [2]>([0, 448])];
            tensor<int32, [2]> context_9_end_0 = const()[name = tensor<string, []>("context_9_end_0"), val = tensor<int32, [2]>([1, 512])];
            tensor<bool, [2]> context_9_end_mask_0 = const()[name = tensor<string, []>("context_9_end_mask_0"), val = tensor<bool, [2]>([true, true])];
            tensor<fp16, [1, 64]> context_9_cast_fp16 = slice_by_index(begin = context_9_begin_0, end = context_9_end_0, end_mask = context_9_end_mask_0, x = chunk_9_cast_fp16)[name = tensor<string, []>("context_9_cast_fp16")];
            tensor<int32, [2]> chunk_11_begin_0 = const()[name = tensor<string, []>("chunk_11_begin_0"), val = tensor<int32, [2]>([0, 2560])];
            tensor<int32, [2]> chunk_11_end_0 = const()[name = tensor<string, []>("chunk_11_end_0"), val = tensor<int32, [2]>([1, 3072])];
            tensor<bool, [2]> chunk_11_end_mask_0 = const()[name = tensor<string, []>("chunk_11_end_mask_0"), val = tensor<bool, [2]>([true, false])];
            tensor<fp16, [1, 512]> chunk_11_cast_fp16 = slice_by_index(begin = chunk_11_begin_0, end = chunk_11_end_0, end_mask = chunk_11_end_mask_0, x = current_audio_cast_fp16)[name = tensor<string, []>("chunk_11_cast_fp16")];
            tensor<int32, []> var_153 = const()[name = tensor<string, []>("op_153"), val = tensor<int32, []>(1)];
            tensor<bool, []> input_141_interleave_0 = const()[name = tensor<string, []>("input_141_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 576]> input_141_cast_fp16 = concat(axis = var_153, interleave = input_141_interleave_0, values = (context_9_cast_fp16, chunk_11_cast_fp16))[name = tensor<string, []>("input_141_cast_fp16")];
            tensor<int32, [2]> context_11_begin_0 = const()[name = tensor<string, []>("context_11_begin_0"), val = tensor<int32, [2]>([0, 448])];
            tensor<int32, [2]> context_11_end_0 = const()[name = tensor<string, []>("context_11_end_0"), val = tensor<int32, [2]>([1, 512])];
            tensor<bool, [2]> context_11_end_mask_0 = const()[name = tensor<string, []>("context_11_end_mask_0"), val = tensor<bool, [2]>([true, true])];
            tensor<fp16, [1, 64]> context_11_cast_fp16 = slice_by_index(begin = context_11_begin_0, end = context_11_end_0, end_mask = context_11_end_mask_0, x = chunk_11_cast_fp16)[name = tensor<string, []>("context_11_cast_fp16")];
            tensor<int32, [2]> chunk_13_begin_0 = const()[name = tensor<string, []>("chunk_13_begin_0"), val = tensor<int32, [2]>([0, 3072])];
            tensor<int32, [2]> chunk_13_end_0 = const()[name = tensor<string, []>("chunk_13_end_0"), val = tensor<int32, [2]>([1, 3584])];
            tensor<bool, [2]> chunk_13_end_mask_0 = const()[name = tensor<string, []>("chunk_13_end_mask_0"), val = tensor<bool, [2]>([true, false])];
            tensor<fp16, [1, 512]> chunk_13_cast_fp16 = slice_by_index(begin = chunk_13_begin_0, end = chunk_13_end_0, end_mask = chunk_13_end_mask_0, x = current_audio_cast_fp16)[name = tensor<string, []>("chunk_13_cast_fp16")];
            tensor<int32, []> var_176 = const()[name = tensor<string, []>("op_176"), val = tensor<int32, []>(1)];
            tensor<bool, []> input_169_interleave_0 = const()[name = tensor<string, []>("input_169_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 576]> input_169_cast_fp16 = concat(axis = var_176, interleave = input_169_interleave_0, values = (context_11_cast_fp16, chunk_13_cast_fp16))[name = tensor<string, []>("input_169_cast_fp16")];
            tensor<int32, [2]> context_begin_0 = const()[name = tensor<string, []>("context_begin_0"), val = tensor<int32, [2]>([0, 448])];
            tensor<int32, [2]> context_end_0 = const()[name = tensor<string, []>("context_end_0"), val = tensor<int32, [2]>([1, 512])];
            tensor<bool, [2]> context_end_mask_0 = const()[name = tensor<string, []>("context_end_mask_0"), val = tensor<bool, [2]>([true, true])];
            tensor<fp16, [1, 64]> context_cast_fp16 = slice_by_index(begin = context_begin_0, end = context_end_0, end_mask = context_end_mask_0, x = chunk_13_cast_fp16)[name = tensor<string, []>("context_cast_fp16")];
            tensor<int32, [2]> chunk_begin_0 = const()[name = tensor<string, []>("chunk_begin_0"), val = tensor<int32, [2]>([0, 3584])];
            tensor<int32, [2]> chunk_end_0 = const()[name = tensor<string, []>("chunk_end_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<bool, [2]> chunk_end_mask_0 = const()[name = tensor<string, []>("chunk_end_mask_0"), val = tensor<bool, [2]>([true, true])];
            tensor<fp16, [1, 512]> chunk_cast_fp16 = slice_by_index(begin = chunk_begin_0, end = chunk_end_0, end_mask = chunk_end_mask_0, x = current_audio_cast_fp16)[name = tensor<string, []>("chunk_cast_fp16")];
            tensor<int32, []> var_199 = const()[name = tensor<string, []>("op_199"), val = tensor<int32, []>(1)];
            tensor<bool, []> input_197_interleave_0 = const()[name = tensor<string, []>("input_197_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 576]> input_197_cast_fp16 = concat(axis = var_199, interleave = input_197_interleave_0, values = (context_cast_fp16, chunk_cast_fp16))[name = tensor<string, []>("input_197_cast_fp16")];
            tensor<int32, [4]> x_1_pad_0 = const()[name = tensor<string, []>("x_1_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 64])];
            tensor<string, []> x_1_mode_0 = const()[name = tensor<string, []>("x_1_mode_0"), val = tensor<string, []>("reflect")];
            tensor<fp16, []> const_0_to_fp16 = const()[name = tensor<string, []>("const_0_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 640]> x_1_cast_fp16 = pad(constant_val = const_0_to_fp16, mode = x_1_mode_0, pad = x_1_pad_0, x = input_1_cast_fp16)[name = tensor<string, []>("x_1_cast_fp16")];
            tensor<int32, [1]> x_3_axes_0 = const()[name = tensor<string, []>("x_3_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 640]> x_3_cast_fp16 = expand_dims(axes = x_3_axes_0, x = x_1_cast_fp16)[name = tensor<string, []>("x_3_cast_fp16")];
            tensor<string, []> stft_out_1_pad_type_0 = const()[name = tensor<string, []>("stft_out_1_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> stft_out_1_strides_0 = const()[name = tensor<string, []>("stft_out_1_strides_0"), val = tensor<int32, [1]>([128])];
            tensor<int32, [2]> stft_out_1_pad_0 = const()[name = tensor<string, []>("stft_out_1_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> stft_out_1_dilations_0 = const()[name = tensor<string, []>("stft_out_1_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> stft_out_1_groups_0 = const()[name = tensor<string, []>("stft_out_1_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [258, 1, 256]> stft_forward_basis_to_fp16 = const()[name = tensor<string, []>("stft_forward_basis_to_fp16"), val = tensor<fp16, [258, 1, 256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(64)))];
            tensor<fp16, [1, 258, 4]> stft_out_1_cast_fp16 = conv(dilations = stft_out_1_dilations_0, groups = stft_out_1_groups_0, pad = stft_out_1_pad_0, pad_type = stft_out_1_pad_type_0, strides = stft_out_1_strides_0, weight = stft_forward_basis_to_fp16, x = x_3_cast_fp16)[name = tensor<string, []>("stft_out_1_cast_fp16")];
            tensor<int32, [3]> var_222_begin_0 = const()[name = tensor<string, []>("op_222_begin_0"), val = tensor<int32, [3]>([0, 0, 0])];
            tensor<int32, [3]> var_222_end_0 = const()[name = tensor<string, []>("op_222_end_0"), val = tensor<int32, [3]>([1, 129, 4])];
            tensor<bool, [3]> var_222_end_mask_0 = const()[name = tensor<string, []>("op_222_end_mask_0"), val = tensor<bool, [3]>([true, false, true])];
            tensor<fp16, [1, 129, 4]> var_222_cast_fp16 = slice_by_index(begin = var_222_begin_0, end = var_222_end_0, end_mask = var_222_end_mask_0, x = stft_out_1_cast_fp16)[name = tensor<string, []>("op_222_cast_fp16")];
            tensor<int32, [3]> var_225_begin_0 = const()[name = tensor<string, []>("op_225_begin_0"), val = tensor<int32, [3]>([0, 129, 0])];
            tensor<int32, [3]> var_225_end_0 = const()[name = tensor<string, []>("op_225_end_0"), val = tensor<int32, [3]>([1, 258, 4])];
            tensor<bool, [3]> var_225_end_mask_0 = const()[name = tensor<string, []>("op_225_end_mask_0"), val = tensor<bool, [3]>([true, true, true])];
            tensor<fp16, [1, 129, 4]> var_225_cast_fp16 = slice_by_index(begin = var_225_begin_0, end = var_225_end_0, end_mask = var_225_end_mask_0, x = stft_out_1_cast_fp16)[name = tensor<string, []>("op_225_cast_fp16")];
            tensor<fp16, []> var_201_promoted_to_fp16 = const()[name = tensor<string, []>("op_201_promoted_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_227_cast_fp16 = pow(x = var_222_cast_fp16, y = var_201_promoted_to_fp16)[name = tensor<string, []>("op_227_cast_fp16")];
            tensor<fp16, []> var_201_promoted_1_to_fp16 = const()[name = tensor<string, []>("op_201_promoted_1_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_228_cast_fp16 = pow(x = var_225_cast_fp16, y = var_201_promoted_1_to_fp16)[name = tensor<string, []>("op_228_cast_fp16")];
            tensor<fp16, [1, 129, 4]> var_229_cast_fp16 = add(x = var_227_cast_fp16, y = var_228_cast_fp16)[name = tensor<string, []>("op_229_cast_fp16")];
            tensor<fp16, []> var_230_to_fp16 = const()[name = tensor<string, []>("op_230_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 129, 4]> var_231_cast_fp16 = add(x = var_229_cast_fp16, y = var_230_to_fp16)[name = tensor<string, []>("op_231_cast_fp16")];
            tensor<fp16, [1, 129, 4]> input_3_cast_fp16 = sqrt(x = var_231_cast_fp16)[name = tensor<string, []>("input_3_cast_fp16")];
            tensor<string, []> input_5_pad_type_0 = const()[name = tensor<string, []>("input_5_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_5_pad_0 = const()[name = tensor<string, []>("input_5_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_5_strides_0 = const()[name = tensor<string, []>("input_5_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_5_dilations_0 = const()[name = tensor<string, []>("input_5_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_5_groups_0 = const()[name = tensor<string, []>("input_5_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [128, 129, 3]> encoder_layers_0_weight_to_fp16 = const()[name = tensor<string, []>("encoder_layers_0_weight_to_fp16"), val = tensor<fp16, [128, 129, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(132224)))];
            tensor<fp16, [128]> encoder_layers_0_bias_to_fp16 = const()[name = tensor<string, []>("encoder_layers_0_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(231360)))];
            tensor<fp16, [1, 128, 4]> input_5_cast_fp16 = conv(bias = encoder_layers_0_bias_to_fp16, dilations = input_5_dilations_0, groups = input_5_groups_0, pad = input_5_pad_0, pad_type = input_5_pad_type_0, strides = input_5_strides_0, weight = encoder_layers_0_weight_to_fp16, x = input_3_cast_fp16)[name = tensor<string, []>("input_5_cast_fp16")];
            tensor<fp16, [1, 128, 4]> x_5_cast_fp16 = relu(x = input_5_cast_fp16)[name = tensor<string, []>("x_5_cast_fp16")];
            tensor<fp16, []> const_1_to_fp16 = const()[name = tensor<string, []>("const_1_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, []> var_234_to_fp16 = const()[name = tensor<string, []>("op_234_to_fp16"), val = tensor<fp16, []>(0x1.388p+13)];
            tensor<fp16, [1, 128, 4]> clip_0_cast_fp16 = clip(alpha = const_1_to_fp16, beta = var_234_to_fp16, x = x_5_cast_fp16)[name = tensor<string, []>("clip_0_cast_fp16")];
            tensor<string, []> input_9_pad_type_0 = const()[name = tensor<string, []>("input_9_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_9_pad_0 = const()[name = tensor<string, []>("input_9_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_9_strides_0 = const()[name = tensor<string, []>("input_9_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_9_dilations_0 = const()[name = tensor<string, []>("input_9_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_9_groups_0 = const()[name = tensor<string, []>("input_9_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [64, 128, 3]> encoder_layers_2_weight_to_fp16 = const()[name = tensor<string, []>("encoder_layers_2_weight_to_fp16"), val = tensor<fp16, [64, 128, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(231680)))];
            tensor<fp16, [64]> encoder_layers_2_bias_to_fp16 = const()[name = tensor<string, []>("encoder_layers_2_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(280896)))];
            tensor<fp16, [1, 64, 2]> input_9_cast_fp16 = conv(bias = encoder_layers_2_bias_to_fp16, dilations = input_9_dilations_0, groups = input_9_groups_0, pad = input_9_pad_0, pad_type = input_9_pad_type_0, strides = input_9_strides_0, weight = encoder_layers_2_weight_to_fp16, x = clip_0_cast_fp16)[name = tensor<string, []>("input_9_cast_fp16")];
            tensor<fp16, [1, 64, 2]> x_7_cast_fp16 = relu(x = input_9_cast_fp16)[name = tensor<string, []>("x_7_cast_fp16")];
            tensor<fp16, []> const_2_to_fp16 = const()[name = tensor<string, []>("const_2_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 2]> clip_1_cast_fp16 = clip(alpha = const_2_to_fp16, beta = var_234_to_fp16, x = x_7_cast_fp16)[name = tensor<string, []>("clip_1_cast_fp16")];
            tensor<string, []> input_13_pad_type_0 = const()[name = tensor<string, []>("input_13_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_13_pad_0 = const()[name = tensor<string, []>("input_13_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_13_strides_0 = const()[name = tensor<string, []>("input_13_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_13_dilations_0 = const()[name = tensor<string, []>("input_13_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_13_groups_0 = const()[name = tensor<string, []>("input_13_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [64, 64, 3]> encoder_layers_4_weight_to_fp16 = const()[name = tensor<string, []>("encoder_layers_4_weight_to_fp16"), val = tensor<fp16, [64, 64, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(281088)))];
            tensor<fp16, [64]> encoder_layers_4_bias_to_fp16 = const()[name = tensor<string, []>("encoder_layers_4_bias_to_fp16"), val = tensor<fp16, [64]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(305728)))];
            tensor<fp16, [1, 64, 1]> input_13_cast_fp16 = conv(bias = encoder_layers_4_bias_to_fp16, dilations = input_13_dilations_0, groups = input_13_groups_0, pad = input_13_pad_0, pad_type = input_13_pad_type_0, strides = input_13_strides_0, weight = encoder_layers_4_weight_to_fp16, x = clip_1_cast_fp16)[name = tensor<string, []>("input_13_cast_fp16")];
            tensor<fp16, [1, 64, 1]> x_9_cast_fp16 = relu(x = input_13_cast_fp16)[name = tensor<string, []>("x_9_cast_fp16")];
            tensor<fp16, []> const_3_to_fp16 = const()[name = tensor<string, []>("const_3_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 1]> clip_2_cast_fp16 = clip(alpha = const_3_to_fp16, beta = var_234_to_fp16, x = x_9_cast_fp16)[name = tensor<string, []>("clip_2_cast_fp16")];
            tensor<string, []> input_17_pad_type_0 = const()[name = tensor<string, []>("input_17_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_17_pad_0 = const()[name = tensor<string, []>("input_17_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_17_strides_0 = const()[name = tensor<string, []>("input_17_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_17_dilations_0 = const()[name = tensor<string, []>("input_17_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_17_groups_0 = const()[name = tensor<string, []>("input_17_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [128, 64, 3]> encoder_layers_6_weight_to_fp16 = const()[name = tensor<string, []>("encoder_layers_6_weight_to_fp16"), val = tensor<fp16, [128, 64, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(305920)))];
            tensor<fp16, [128]> encoder_layers_6_bias_to_fp16 = const()[name = tensor<string, []>("encoder_layers_6_bias_to_fp16"), val = tensor<fp16, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(355136)))];
            tensor<fp16, [1, 128, 1]> input_17_cast_fp16 = conv(bias = encoder_layers_6_bias_to_fp16, dilations = input_17_dilations_0, groups = input_17_groups_0, pad = input_17_pad_0, pad_type = input_17_pad_type_0, strides = input_17_strides_0, weight = encoder_layers_6_weight_to_fp16, x = clip_2_cast_fp16)[name = tensor<string, []>("input_17_cast_fp16")];
            tensor<fp16, [1, 128, 1]> x_11_cast_fp16 = relu(x = input_17_cast_fp16)[name = tensor<string, []>("x_11_cast_fp16")];
            tensor<fp16, []> const_4_to_fp16 = const()[name = tensor<string, []>("const_4_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 128, 1]> clip_3_cast_fp16 = clip(alpha = const_4_to_fp16, beta = var_234_to_fp16, x = x_11_cast_fp16)[name = tensor<string, []>("clip_3_cast_fp16")];
            tensor<int32, [3]> transpose_0_perm_0 = const()[name = tensor<string, []>("transpose_0_perm_0"), val = tensor<int32, [3]>([2, 0, 1])];
            tensor<string, []> transpose_0_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("transpose_0_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> hx_1_axes_0 = const()[name = tensor<string, []>("hx_1_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> hidden_state_to_fp16_dtype_0 = const()[name = tensor<string, []>("hidden_state_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> hidden_state_to_fp16 = cast(dtype = hidden_state_to_fp16_dtype_0, x = hidden_state)[name = tensor<string, []>("cast_51")];
            tensor<fp16, [1, 1, 128]> hx_1_cast_fp16 = expand_dims(axes = hx_1_axes_0, x = hidden_state_to_fp16)[name = tensor<string, []>("hx_1_cast_fp16")];
            tensor<int32, [1]> hx_3_axes_0 = const()[name = tensor<string, []>("hx_3_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> cell_state_to_fp16_dtype_0 = const()[name = tensor<string, []>("cell_state_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> cell_state_to_fp16 = cast(dtype = cell_state_to_fp16_dtype_0, x = cell_state)[name = tensor<string, []>("cast_50")];
            tensor<fp16, [1, 1, 128]> hx_3_cast_fp16 = expand_dims(axes = hx_3_axes_0, x = cell_state_to_fp16)[name = tensor<string, []>("hx_3_cast_fp16")];
            tensor<fp32, [512]> concat_0 = const()[name = tensor<string, []>("concat_0"), val = tensor<fp32, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(355456)))];
            tensor<fp32, [512, 128]> concat_1 = const()[name = tensor<string, []>("concat_1"), val = tensor<fp32, [512, 128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(357568)))];
            tensor<fp32, [512, 128]> concat_2 = const()[name = tensor<string, []>("concat_2"), val = tensor<fp32, [512, 128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(619776)))];
            tensor<int32, [1]> lstm_out_1_batch_first_lstm_h0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_1_batch_first_lstm_h0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_1_batch_first_lstm_h0_squeeze_cast_fp16 = squeeze(axes = lstm_out_1_batch_first_lstm_h0_squeeze_axes_0, x = hx_1_cast_fp16)[name = tensor<string, []>("lstm_out_1_batch_first_lstm_h0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_1_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_1_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_1_batch_first_lstm_c0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_1_batch_first_lstm_c0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_1_batch_first_lstm_c0_squeeze_cast_fp16 = squeeze(axes = lstm_out_1_batch_first_lstm_c0_squeeze_axes_0, x = hx_3_cast_fp16)[name = tensor<string, []>("lstm_out_1_batch_first_lstm_c0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_1_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_1_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<string, []> lstm_out_1_batch_first_direction_0 = const()[name = tensor<string, []>("lstm_out_1_batch_first_direction_0"), val = tensor<string, []>("forward")];
            tensor<bool, []> lstm_out_1_batch_first_output_sequence_0 = const()[name = tensor<string, []>("lstm_out_1_batch_first_output_sequence_0"), val = tensor<bool, []>(true)];
            tensor<string, []> lstm_out_1_batch_first_recurrent_activation_0 = const()[name = tensor<string, []>("lstm_out_1_batch_first_recurrent_activation_0"), val = tensor<string, []>("sigmoid")];
            tensor<string, []> lstm_out_1_batch_first_cell_activation_0 = const()[name = tensor<string, []>("lstm_out_1_batch_first_cell_activation_0"), val = tensor<string, []>("tanh")];
            tensor<string, []> lstm_out_1_batch_first_activation_0 = const()[name = tensor<string, []>("lstm_out_1_batch_first_activation_0"), val = tensor<string, []>("tanh")];
            tensor<fp32, [1, 128]> lstm_out_1_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_1_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_1_batch_first_lstm_c0_squeeze_cast_fp16)[name = tensor<string, []>("cast_48")];
            tensor<fp32, [1, 128]> lstm_out_1_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_1_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_1_batch_first_lstm_h0_squeeze_cast_fp16)[name = tensor<string, []>("cast_49")];
            tensor<fp16, [1, 1, 128]> transpose_0_cast_fp16 = transpose(perm = transpose_0_perm_0, x = clip_3_cast_fp16)[name = tensor<string, []>("transpose_31")];
            tensor<fp32, [1, 1, 128]> transpose_0_cast_fp16_to_fp32 = cast(dtype = transpose_0_cast_fp16_to_fp32_dtype_0, x = transpose_0_cast_fp16)[name = tensor<string, []>("cast_52")];
            tensor<fp32, [1, 1, 128]> lstm_out_1_batch_first_0, tensor<fp32, [1, 128]> lstm_out_1_batch_first_1, tensor<fp32, [1, 128]> lstm_out_1_batch_first_2 = lstm(activation = lstm_out_1_batch_first_activation_0, bias = concat_0, cell_activation = lstm_out_1_batch_first_cell_activation_0, direction = lstm_out_1_batch_first_direction_0, initial_c = lstm_out_1_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32, initial_h = lstm_out_1_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32, output_sequence = lstm_out_1_batch_first_output_sequence_0, recurrent_activation = lstm_out_1_batch_first_recurrent_activation_0, weight_hh = concat_2, weight_ih = concat_1, x = transpose_0_cast_fp16_to_fp32)[name = tensor<string, []>("lstm_out_1_batch_first")];
            tensor<int32, [3]> transpose_1_perm_0 = const()[name = tensor<string, []>("transpose_1_perm_0"), val = tensor<int32, [3]>([1, 2, 0])];
            tensor<string, []> lstm_out_1_batch_first_0_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_1_batch_first_0_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<int32, [1]> hn_1_axes_0 = const()[name = tensor<string, []>("hn_1_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_1_batch_first_1_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_1_batch_first_1_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_1_batch_first_1_to_fp16 = cast(dtype = lstm_out_1_batch_first_1_to_fp16_dtype_0, x = lstm_out_1_batch_first_1)[name = tensor<string, []>("cast_46")];
            tensor<fp16, [1, 1, 128]> hn_1_cast_fp16 = expand_dims(axes = hn_1_axes_0, x = lstm_out_1_batch_first_1_to_fp16)[name = tensor<string, []>("hn_1_cast_fp16")];
            tensor<int32, [1]> cn_1_axes_0 = const()[name = tensor<string, []>("cn_1_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_1_batch_first_2_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_1_batch_first_2_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_1_batch_first_2_to_fp16 = cast(dtype = lstm_out_1_batch_first_2_to_fp16_dtype_0, x = lstm_out_1_batch_first_2)[name = tensor<string, []>("cast_45")];
            tensor<fp16, [1, 1, 128]> cn_1_cast_fp16 = expand_dims(axes = cn_1_axes_0, x = lstm_out_1_batch_first_2_to_fp16)[name = tensor<string, []>("cn_1_cast_fp16")];
            tensor<fp16, [1, 1, 128]> lstm_out_1_batch_first_0_to_fp16 = cast(dtype = lstm_out_1_batch_first_0_to_fp16_dtype_0, x = lstm_out_1_batch_first_0)[name = tensor<string, []>("cast_47")];
            tensor<fp16, [1, 128, 1]> transpose_1_cast_fp16 = transpose(perm = transpose_1_perm_0, x = lstm_out_1_batch_first_0_to_fp16)[name = tensor<string, []>("transpose_30")];
            tensor<fp16, [1, 128, 1]> input_25_cast_fp16 = relu(x = transpose_1_cast_fp16)[name = tensor<string, []>("input_25_cast_fp16")];
            tensor<string, []> input_27_pad_type_0 = const()[name = tensor<string, []>("input_27_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> input_27_strides_0 = const()[name = tensor<string, []>("input_27_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [2]> input_27_pad_0 = const()[name = tensor<string, []>("input_27_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> input_27_dilations_0 = const()[name = tensor<string, []>("input_27_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_27_groups_0 = const()[name = tensor<string, []>("input_27_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 1]> decoder_final_conv_weight_to_fp16 = const()[name = tensor<string, []>("decoder_final_conv_weight_to_fp16"), val = tensor<fp16, [1, 128, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(881984)))];
            tensor<fp16, [1]> decoder_final_conv_bias_to_fp16 = const()[name = tensor<string, []>("decoder_final_conv_bias_to_fp16"), val = tensor<fp16, [1]>([0x1.dfp-5])];
            tensor<fp16, [1, 1, 1]> input_27_cast_fp16 = conv(bias = decoder_final_conv_bias_to_fp16, dilations = input_27_dilations_0, groups = input_27_groups_0, pad = input_27_pad_0, pad_type = input_27_pad_type_0, strides = input_27_strides_0, weight = decoder_final_conv_weight_to_fp16, x = input_25_cast_fp16)[name = tensor<string, []>("input_27_cast_fp16")];
            tensor<fp16, [1, 1, 1]> var_318_cast_fp16 = sigmoid(x = input_27_cast_fp16)[name = tensor<string, []>("op_318_cast_fp16")];
            tensor<int32, [4]> x_15_pad_0 = const()[name = tensor<string, []>("x_15_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 64])];
            tensor<string, []> x_15_mode_0 = const()[name = tensor<string, []>("x_15_mode_0"), val = tensor<string, []>("reflect")];
            tensor<fp16, []> const_5_to_fp16 = const()[name = tensor<string, []>("const_5_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 640]> x_15_cast_fp16 = pad(constant_val = const_5_to_fp16, mode = x_15_mode_0, pad = x_15_pad_0, x = input_29_cast_fp16)[name = tensor<string, []>("x_15_cast_fp16")];
            tensor<int32, [1]> x_17_axes_0 = const()[name = tensor<string, []>("x_17_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 640]> x_17_cast_fp16 = expand_dims(axes = x_17_axes_0, x = x_15_cast_fp16)[name = tensor<string, []>("x_17_cast_fp16")];
            tensor<string, []> stft_out_3_pad_type_0 = const()[name = tensor<string, []>("stft_out_3_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> stft_out_3_strides_0 = const()[name = tensor<string, []>("stft_out_3_strides_0"), val = tensor<int32, [1]>([128])];
            tensor<int32, [2]> stft_out_3_pad_0 = const()[name = tensor<string, []>("stft_out_3_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> stft_out_3_dilations_0 = const()[name = tensor<string, []>("stft_out_3_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> stft_out_3_groups_0 = const()[name = tensor<string, []>("stft_out_3_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 258, 4]> stft_out_3_cast_fp16 = conv(dilations = stft_out_3_dilations_0, groups = stft_out_3_groups_0, pad = stft_out_3_pad_0, pad_type = stft_out_3_pad_type_0, strides = stft_out_3_strides_0, weight = stft_forward_basis_to_fp16, x = x_17_cast_fp16)[name = tensor<string, []>("stft_out_3_cast_fp16")];
            tensor<int32, [3]> var_346_begin_0 = const()[name = tensor<string, []>("op_346_begin_0"), val = tensor<int32, [3]>([0, 0, 0])];
            tensor<int32, [3]> var_346_end_0 = const()[name = tensor<string, []>("op_346_end_0"), val = tensor<int32, [3]>([1, 129, 4])];
            tensor<bool, [3]> var_346_end_mask_0 = const()[name = tensor<string, []>("op_346_end_mask_0"), val = tensor<bool, [3]>([true, false, true])];
            tensor<fp16, [1, 129, 4]> var_346_cast_fp16 = slice_by_index(begin = var_346_begin_0, end = var_346_end_0, end_mask = var_346_end_mask_0, x = stft_out_3_cast_fp16)[name = tensor<string, []>("op_346_cast_fp16")];
            tensor<int32, [3]> var_349_begin_0 = const()[name = tensor<string, []>("op_349_begin_0"), val = tensor<int32, [3]>([0, 129, 0])];
            tensor<int32, [3]> var_349_end_0 = const()[name = tensor<string, []>("op_349_end_0"), val = tensor<int32, [3]>([1, 258, 4])];
            tensor<bool, [3]> var_349_end_mask_0 = const()[name = tensor<string, []>("op_349_end_mask_0"), val = tensor<bool, [3]>([true, true, true])];
            tensor<fp16, [1, 129, 4]> var_349_cast_fp16 = slice_by_index(begin = var_349_begin_0, end = var_349_end_0, end_mask = var_349_end_mask_0, x = stft_out_3_cast_fp16)[name = tensor<string, []>("op_349_cast_fp16")];
            tensor<fp16, []> var_325_promoted_to_fp16 = const()[name = tensor<string, []>("op_325_promoted_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_351_cast_fp16 = pow(x = var_346_cast_fp16, y = var_325_promoted_to_fp16)[name = tensor<string, []>("op_351_cast_fp16")];
            tensor<fp16, []> var_325_promoted_1_to_fp16 = const()[name = tensor<string, []>("op_325_promoted_1_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_352_cast_fp16 = pow(x = var_349_cast_fp16, y = var_325_promoted_1_to_fp16)[name = tensor<string, []>("op_352_cast_fp16")];
            tensor<fp16, [1, 129, 4]> var_353_cast_fp16 = add(x = var_351_cast_fp16, y = var_352_cast_fp16)[name = tensor<string, []>("op_353_cast_fp16")];
            tensor<fp16, []> var_354_to_fp16 = const()[name = tensor<string, []>("op_354_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 129, 4]> var_355_cast_fp16 = add(x = var_353_cast_fp16, y = var_354_to_fp16)[name = tensor<string, []>("op_355_cast_fp16")];
            tensor<fp16, [1, 129, 4]> input_31_cast_fp16 = sqrt(x = var_355_cast_fp16)[name = tensor<string, []>("input_31_cast_fp16")];
            tensor<string, []> input_33_pad_type_0 = const()[name = tensor<string, []>("input_33_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_33_pad_0 = const()[name = tensor<string, []>("input_33_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_33_strides_0 = const()[name = tensor<string, []>("input_33_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_33_dilations_0 = const()[name = tensor<string, []>("input_33_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_33_groups_0 = const()[name = tensor<string, []>("input_33_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 4]> input_33_cast_fp16 = conv(bias = encoder_layers_0_bias_to_fp16, dilations = input_33_dilations_0, groups = input_33_groups_0, pad = input_33_pad_0, pad_type = input_33_pad_type_0, strides = input_33_strides_0, weight = encoder_layers_0_weight_to_fp16, x = input_31_cast_fp16)[name = tensor<string, []>("input_33_cast_fp16")];
            tensor<fp16, [1, 128, 4]> x_19_cast_fp16 = relu(x = input_33_cast_fp16)[name = tensor<string, []>("x_19_cast_fp16")];
            tensor<fp16, []> const_6_to_fp16 = const()[name = tensor<string, []>("const_6_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, []> var_358_to_fp16 = const()[name = tensor<string, []>("op_358_to_fp16"), val = tensor<fp16, []>(0x1.388p+13)];
            tensor<fp16, [1, 128, 4]> clip_4_cast_fp16 = clip(alpha = const_6_to_fp16, beta = var_358_to_fp16, x = x_19_cast_fp16)[name = tensor<string, []>("clip_4_cast_fp16")];
            tensor<string, []> input_37_pad_type_0 = const()[name = tensor<string, []>("input_37_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_37_pad_0 = const()[name = tensor<string, []>("input_37_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_37_strides_0 = const()[name = tensor<string, []>("input_37_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_37_dilations_0 = const()[name = tensor<string, []>("input_37_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_37_groups_0 = const()[name = tensor<string, []>("input_37_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 2]> input_37_cast_fp16 = conv(bias = encoder_layers_2_bias_to_fp16, dilations = input_37_dilations_0, groups = input_37_groups_0, pad = input_37_pad_0, pad_type = input_37_pad_type_0, strides = input_37_strides_0, weight = encoder_layers_2_weight_to_fp16, x = clip_4_cast_fp16)[name = tensor<string, []>("input_37_cast_fp16")];
            tensor<fp16, [1, 64, 2]> x_21_cast_fp16 = relu(x = input_37_cast_fp16)[name = tensor<string, []>("x_21_cast_fp16")];
            tensor<fp16, []> const_7_to_fp16 = const()[name = tensor<string, []>("const_7_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 2]> clip_5_cast_fp16 = clip(alpha = const_7_to_fp16, beta = var_358_to_fp16, x = x_21_cast_fp16)[name = tensor<string, []>("clip_5_cast_fp16")];
            tensor<string, []> input_41_pad_type_0 = const()[name = tensor<string, []>("input_41_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_41_pad_0 = const()[name = tensor<string, []>("input_41_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_41_strides_0 = const()[name = tensor<string, []>("input_41_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_41_dilations_0 = const()[name = tensor<string, []>("input_41_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_41_groups_0 = const()[name = tensor<string, []>("input_41_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1]> input_41_cast_fp16 = conv(bias = encoder_layers_4_bias_to_fp16, dilations = input_41_dilations_0, groups = input_41_groups_0, pad = input_41_pad_0, pad_type = input_41_pad_type_0, strides = input_41_strides_0, weight = encoder_layers_4_weight_to_fp16, x = clip_5_cast_fp16)[name = tensor<string, []>("input_41_cast_fp16")];
            tensor<fp16, [1, 64, 1]> x_23_cast_fp16 = relu(x = input_41_cast_fp16)[name = tensor<string, []>("x_23_cast_fp16")];
            tensor<fp16, []> const_8_to_fp16 = const()[name = tensor<string, []>("const_8_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 1]> clip_6_cast_fp16 = clip(alpha = const_8_to_fp16, beta = var_358_to_fp16, x = x_23_cast_fp16)[name = tensor<string, []>("clip_6_cast_fp16")];
            tensor<string, []> input_45_pad_type_0 = const()[name = tensor<string, []>("input_45_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_45_pad_0 = const()[name = tensor<string, []>("input_45_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_45_strides_0 = const()[name = tensor<string, []>("input_45_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_45_dilations_0 = const()[name = tensor<string, []>("input_45_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_45_groups_0 = const()[name = tensor<string, []>("input_45_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 1]> input_45_cast_fp16 = conv(bias = encoder_layers_6_bias_to_fp16, dilations = input_45_dilations_0, groups = input_45_groups_0, pad = input_45_pad_0, pad_type = input_45_pad_type_0, strides = input_45_strides_0, weight = encoder_layers_6_weight_to_fp16, x = clip_6_cast_fp16)[name = tensor<string, []>("input_45_cast_fp16")];
            tensor<fp16, [1, 128, 1]> x_25_cast_fp16 = relu(x = input_45_cast_fp16)[name = tensor<string, []>("x_25_cast_fp16")];
            tensor<fp16, []> const_9_to_fp16 = const()[name = tensor<string, []>("const_9_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 128, 1]> clip_7_cast_fp16 = clip(alpha = const_9_to_fp16, beta = var_358_to_fp16, x = x_25_cast_fp16)[name = tensor<string, []>("clip_7_cast_fp16")];
            tensor<int32, [3]> transpose_2_perm_0 = const()[name = tensor<string, []>("transpose_2_perm_0"), val = tensor<int32, [3]>([2, 0, 1])];
            tensor<string, []> transpose_2_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("transpose_2_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_3_batch_first_lstm_h0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_3_batch_first_lstm_h0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_3_batch_first_lstm_h0_squeeze_cast_fp16 = squeeze(axes = lstm_out_3_batch_first_lstm_h0_squeeze_axes_0, x = hn_1_cast_fp16)[name = tensor<string, []>("lstm_out_3_batch_first_lstm_h0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_3_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_3_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_3_batch_first_lstm_c0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_3_batch_first_lstm_c0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_3_batch_first_lstm_c0_squeeze_cast_fp16 = squeeze(axes = lstm_out_3_batch_first_lstm_c0_squeeze_axes_0, x = cn_1_cast_fp16)[name = tensor<string, []>("lstm_out_3_batch_first_lstm_c0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_3_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_3_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<string, []> lstm_out_3_batch_first_direction_0 = const()[name = tensor<string, []>("lstm_out_3_batch_first_direction_0"), val = tensor<string, []>("forward")];
            tensor<bool, []> lstm_out_3_batch_first_output_sequence_0 = const()[name = tensor<string, []>("lstm_out_3_batch_first_output_sequence_0"), val = tensor<bool, []>(true)];
            tensor<string, []> lstm_out_3_batch_first_recurrent_activation_0 = const()[name = tensor<string, []>("lstm_out_3_batch_first_recurrent_activation_0"), val = tensor<string, []>("sigmoid")];
            tensor<string, []> lstm_out_3_batch_first_cell_activation_0 = const()[name = tensor<string, []>("lstm_out_3_batch_first_cell_activation_0"), val = tensor<string, []>("tanh")];
            tensor<string, []> lstm_out_3_batch_first_activation_0 = const()[name = tensor<string, []>("lstm_out_3_batch_first_activation_0"), val = tensor<string, []>("tanh")];
            tensor<fp32, [1, 128]> lstm_out_3_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_3_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_3_batch_first_lstm_c0_squeeze_cast_fp16)[name = tensor<string, []>("cast_42")];
            tensor<fp32, [1, 128]> lstm_out_3_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_3_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_3_batch_first_lstm_h0_squeeze_cast_fp16)[name = tensor<string, []>("cast_43")];
            tensor<fp16, [1, 1, 128]> transpose_2_cast_fp16 = transpose(perm = transpose_2_perm_0, x = clip_7_cast_fp16)[name = tensor<string, []>("transpose_29")];
            tensor<fp32, [1, 1, 128]> transpose_2_cast_fp16_to_fp32 = cast(dtype = transpose_2_cast_fp16_to_fp32_dtype_0, x = transpose_2_cast_fp16)[name = tensor<string, []>("cast_44")];
            tensor<fp32, [1, 1, 128]> lstm_out_3_batch_first_0, tensor<fp32, [1, 128]> lstm_out_3_batch_first_1, tensor<fp32, [1, 128]> lstm_out_3_batch_first_2 = lstm(activation = lstm_out_3_batch_first_activation_0, bias = concat_0, cell_activation = lstm_out_3_batch_first_cell_activation_0, direction = lstm_out_3_batch_first_direction_0, initial_c = lstm_out_3_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32, initial_h = lstm_out_3_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32, output_sequence = lstm_out_3_batch_first_output_sequence_0, recurrent_activation = lstm_out_3_batch_first_recurrent_activation_0, weight_hh = concat_2, weight_ih = concat_1, x = transpose_2_cast_fp16_to_fp32)[name = tensor<string, []>("lstm_out_3_batch_first")];
            tensor<int32, [3]> transpose_3_perm_0 = const()[name = tensor<string, []>("transpose_3_perm_0"), val = tensor<int32, [3]>([1, 2, 0])];
            tensor<string, []> lstm_out_3_batch_first_0_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_3_batch_first_0_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<int32, [1]> hn_3_axes_0 = const()[name = tensor<string, []>("hn_3_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_3_batch_first_1_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_3_batch_first_1_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_3_batch_first_1_to_fp16 = cast(dtype = lstm_out_3_batch_first_1_to_fp16_dtype_0, x = lstm_out_3_batch_first_1)[name = tensor<string, []>("cast_40")];
            tensor<fp16, [1, 1, 128]> hn_3_cast_fp16 = expand_dims(axes = hn_3_axes_0, x = lstm_out_3_batch_first_1_to_fp16)[name = tensor<string, []>("hn_3_cast_fp16")];
            tensor<int32, [1]> cn_3_axes_0 = const()[name = tensor<string, []>("cn_3_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_3_batch_first_2_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_3_batch_first_2_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_3_batch_first_2_to_fp16 = cast(dtype = lstm_out_3_batch_first_2_to_fp16_dtype_0, x = lstm_out_3_batch_first_2)[name = tensor<string, []>("cast_39")];
            tensor<fp16, [1, 1, 128]> cn_3_cast_fp16 = expand_dims(axes = cn_3_axes_0, x = lstm_out_3_batch_first_2_to_fp16)[name = tensor<string, []>("cn_3_cast_fp16")];
            tensor<fp16, [1, 1, 128]> lstm_out_3_batch_first_0_to_fp16 = cast(dtype = lstm_out_3_batch_first_0_to_fp16_dtype_0, x = lstm_out_3_batch_first_0)[name = tensor<string, []>("cast_41")];
            tensor<fp16, [1, 128, 1]> transpose_3_cast_fp16 = transpose(perm = transpose_3_perm_0, x = lstm_out_3_batch_first_0_to_fp16)[name = tensor<string, []>("transpose_28")];
            tensor<fp16, [1, 128, 1]> input_53_cast_fp16 = relu(x = transpose_3_cast_fp16)[name = tensor<string, []>("input_53_cast_fp16")];
            tensor<string, []> input_55_pad_type_0 = const()[name = tensor<string, []>("input_55_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> input_55_strides_0 = const()[name = tensor<string, []>("input_55_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [2]> input_55_pad_0 = const()[name = tensor<string, []>("input_55_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> input_55_dilations_0 = const()[name = tensor<string, []>("input_55_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_55_groups_0 = const()[name = tensor<string, []>("input_55_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 1, 1]> input_55_cast_fp16 = conv(bias = decoder_final_conv_bias_to_fp16, dilations = input_55_dilations_0, groups = input_55_groups_0, pad = input_55_pad_0, pad_type = input_55_pad_type_0, strides = input_55_strides_0, weight = decoder_final_conv_weight_to_fp16, x = input_53_cast_fp16)[name = tensor<string, []>("input_55_cast_fp16")];
            tensor<fp16, [1, 1, 1]> var_442_cast_fp16 = sigmoid(x = input_55_cast_fp16)[name = tensor<string, []>("op_442_cast_fp16")];
            tensor<int32, [4]> x_29_pad_0 = const()[name = tensor<string, []>("x_29_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 64])];
            tensor<string, []> x_29_mode_0 = const()[name = tensor<string, []>("x_29_mode_0"), val = tensor<string, []>("reflect")];
            tensor<fp16, []> const_10_to_fp16 = const()[name = tensor<string, []>("const_10_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 640]> x_29_cast_fp16 = pad(constant_val = const_10_to_fp16, mode = x_29_mode_0, pad = x_29_pad_0, x = input_57_cast_fp16)[name = tensor<string, []>("x_29_cast_fp16")];
            tensor<int32, [1]> x_31_axes_0 = const()[name = tensor<string, []>("x_31_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 640]> x_31_cast_fp16 = expand_dims(axes = x_31_axes_0, x = x_29_cast_fp16)[name = tensor<string, []>("x_31_cast_fp16")];
            tensor<string, []> stft_out_5_pad_type_0 = const()[name = tensor<string, []>("stft_out_5_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> stft_out_5_strides_0 = const()[name = tensor<string, []>("stft_out_5_strides_0"), val = tensor<int32, [1]>([128])];
            tensor<int32, [2]> stft_out_5_pad_0 = const()[name = tensor<string, []>("stft_out_5_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> stft_out_5_dilations_0 = const()[name = tensor<string, []>("stft_out_5_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> stft_out_5_groups_0 = const()[name = tensor<string, []>("stft_out_5_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 258, 4]> stft_out_5_cast_fp16 = conv(dilations = stft_out_5_dilations_0, groups = stft_out_5_groups_0, pad = stft_out_5_pad_0, pad_type = stft_out_5_pad_type_0, strides = stft_out_5_strides_0, weight = stft_forward_basis_to_fp16, x = x_31_cast_fp16)[name = tensor<string, []>("stft_out_5_cast_fp16")];
            tensor<int32, [3]> var_470_begin_0 = const()[name = tensor<string, []>("op_470_begin_0"), val = tensor<int32, [3]>([0, 0, 0])];
            tensor<int32, [3]> var_470_end_0 = const()[name = tensor<string, []>("op_470_end_0"), val = tensor<int32, [3]>([1, 129, 4])];
            tensor<bool, [3]> var_470_end_mask_0 = const()[name = tensor<string, []>("op_470_end_mask_0"), val = tensor<bool, [3]>([true, false, true])];
            tensor<fp16, [1, 129, 4]> var_470_cast_fp16 = slice_by_index(begin = var_470_begin_0, end = var_470_end_0, end_mask = var_470_end_mask_0, x = stft_out_5_cast_fp16)[name = tensor<string, []>("op_470_cast_fp16")];
            tensor<int32, [3]> var_473_begin_0 = const()[name = tensor<string, []>("op_473_begin_0"), val = tensor<int32, [3]>([0, 129, 0])];
            tensor<int32, [3]> var_473_end_0 = const()[name = tensor<string, []>("op_473_end_0"), val = tensor<int32, [3]>([1, 258, 4])];
            tensor<bool, [3]> var_473_end_mask_0 = const()[name = tensor<string, []>("op_473_end_mask_0"), val = tensor<bool, [3]>([true, true, true])];
            tensor<fp16, [1, 129, 4]> var_473_cast_fp16 = slice_by_index(begin = var_473_begin_0, end = var_473_end_0, end_mask = var_473_end_mask_0, x = stft_out_5_cast_fp16)[name = tensor<string, []>("op_473_cast_fp16")];
            tensor<fp16, []> var_449_promoted_to_fp16 = const()[name = tensor<string, []>("op_449_promoted_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_475_cast_fp16 = pow(x = var_470_cast_fp16, y = var_449_promoted_to_fp16)[name = tensor<string, []>("op_475_cast_fp16")];
            tensor<fp16, []> var_449_promoted_1_to_fp16 = const()[name = tensor<string, []>("op_449_promoted_1_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_476_cast_fp16 = pow(x = var_473_cast_fp16, y = var_449_promoted_1_to_fp16)[name = tensor<string, []>("op_476_cast_fp16")];
            tensor<fp16, [1, 129, 4]> var_477_cast_fp16 = add(x = var_475_cast_fp16, y = var_476_cast_fp16)[name = tensor<string, []>("op_477_cast_fp16")];
            tensor<fp16, []> var_478_to_fp16 = const()[name = tensor<string, []>("op_478_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 129, 4]> var_479_cast_fp16 = add(x = var_477_cast_fp16, y = var_478_to_fp16)[name = tensor<string, []>("op_479_cast_fp16")];
            tensor<fp16, [1, 129, 4]> input_59_cast_fp16 = sqrt(x = var_479_cast_fp16)[name = tensor<string, []>("input_59_cast_fp16")];
            tensor<string, []> input_61_pad_type_0 = const()[name = tensor<string, []>("input_61_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_61_pad_0 = const()[name = tensor<string, []>("input_61_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_61_strides_0 = const()[name = tensor<string, []>("input_61_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_61_dilations_0 = const()[name = tensor<string, []>("input_61_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_61_groups_0 = const()[name = tensor<string, []>("input_61_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 4]> input_61_cast_fp16 = conv(bias = encoder_layers_0_bias_to_fp16, dilations = input_61_dilations_0, groups = input_61_groups_0, pad = input_61_pad_0, pad_type = input_61_pad_type_0, strides = input_61_strides_0, weight = encoder_layers_0_weight_to_fp16, x = input_59_cast_fp16)[name = tensor<string, []>("input_61_cast_fp16")];
            tensor<fp16, [1, 128, 4]> x_33_cast_fp16 = relu(x = input_61_cast_fp16)[name = tensor<string, []>("x_33_cast_fp16")];
            tensor<fp16, []> const_11_to_fp16 = const()[name = tensor<string, []>("const_11_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, []> var_482_to_fp16 = const()[name = tensor<string, []>("op_482_to_fp16"), val = tensor<fp16, []>(0x1.388p+13)];
            tensor<fp16, [1, 128, 4]> clip_8_cast_fp16 = clip(alpha = const_11_to_fp16, beta = var_482_to_fp16, x = x_33_cast_fp16)[name = tensor<string, []>("clip_8_cast_fp16")];
            tensor<string, []> input_65_pad_type_0 = const()[name = tensor<string, []>("input_65_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_65_pad_0 = const()[name = tensor<string, []>("input_65_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_65_strides_0 = const()[name = tensor<string, []>("input_65_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_65_dilations_0 = const()[name = tensor<string, []>("input_65_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_65_groups_0 = const()[name = tensor<string, []>("input_65_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 2]> input_65_cast_fp16 = conv(bias = encoder_layers_2_bias_to_fp16, dilations = input_65_dilations_0, groups = input_65_groups_0, pad = input_65_pad_0, pad_type = input_65_pad_type_0, strides = input_65_strides_0, weight = encoder_layers_2_weight_to_fp16, x = clip_8_cast_fp16)[name = tensor<string, []>("input_65_cast_fp16")];
            tensor<fp16, [1, 64, 2]> x_35_cast_fp16 = relu(x = input_65_cast_fp16)[name = tensor<string, []>("x_35_cast_fp16")];
            tensor<fp16, []> const_12_to_fp16 = const()[name = tensor<string, []>("const_12_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 2]> clip_9_cast_fp16 = clip(alpha = const_12_to_fp16, beta = var_482_to_fp16, x = x_35_cast_fp16)[name = tensor<string, []>("clip_9_cast_fp16")];
            tensor<string, []> input_69_pad_type_0 = const()[name = tensor<string, []>("input_69_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_69_pad_0 = const()[name = tensor<string, []>("input_69_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_69_strides_0 = const()[name = tensor<string, []>("input_69_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_69_dilations_0 = const()[name = tensor<string, []>("input_69_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_69_groups_0 = const()[name = tensor<string, []>("input_69_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1]> input_69_cast_fp16 = conv(bias = encoder_layers_4_bias_to_fp16, dilations = input_69_dilations_0, groups = input_69_groups_0, pad = input_69_pad_0, pad_type = input_69_pad_type_0, strides = input_69_strides_0, weight = encoder_layers_4_weight_to_fp16, x = clip_9_cast_fp16)[name = tensor<string, []>("input_69_cast_fp16")];
            tensor<fp16, [1, 64, 1]> x_37_cast_fp16 = relu(x = input_69_cast_fp16)[name = tensor<string, []>("x_37_cast_fp16")];
            tensor<fp16, []> const_13_to_fp16 = const()[name = tensor<string, []>("const_13_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 1]> clip_10_cast_fp16 = clip(alpha = const_13_to_fp16, beta = var_482_to_fp16, x = x_37_cast_fp16)[name = tensor<string, []>("clip_10_cast_fp16")];
            tensor<string, []> input_73_pad_type_0 = const()[name = tensor<string, []>("input_73_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_73_pad_0 = const()[name = tensor<string, []>("input_73_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_73_strides_0 = const()[name = tensor<string, []>("input_73_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_73_dilations_0 = const()[name = tensor<string, []>("input_73_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_73_groups_0 = const()[name = tensor<string, []>("input_73_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 1]> input_73_cast_fp16 = conv(bias = encoder_layers_6_bias_to_fp16, dilations = input_73_dilations_0, groups = input_73_groups_0, pad = input_73_pad_0, pad_type = input_73_pad_type_0, strides = input_73_strides_0, weight = encoder_layers_6_weight_to_fp16, x = clip_10_cast_fp16)[name = tensor<string, []>("input_73_cast_fp16")];
            tensor<fp16, [1, 128, 1]> x_39_cast_fp16 = relu(x = input_73_cast_fp16)[name = tensor<string, []>("x_39_cast_fp16")];
            tensor<fp16, []> const_14_to_fp16 = const()[name = tensor<string, []>("const_14_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 128, 1]> clip_11_cast_fp16 = clip(alpha = const_14_to_fp16, beta = var_482_to_fp16, x = x_39_cast_fp16)[name = tensor<string, []>("clip_11_cast_fp16")];
            tensor<int32, [3]> transpose_4_perm_0 = const()[name = tensor<string, []>("transpose_4_perm_0"), val = tensor<int32, [3]>([2, 0, 1])];
            tensor<string, []> transpose_4_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("transpose_4_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_5_batch_first_lstm_h0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_5_batch_first_lstm_h0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_5_batch_first_lstm_h0_squeeze_cast_fp16 = squeeze(axes = lstm_out_5_batch_first_lstm_h0_squeeze_axes_0, x = hn_3_cast_fp16)[name = tensor<string, []>("lstm_out_5_batch_first_lstm_h0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_5_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_5_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_5_batch_first_lstm_c0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_5_batch_first_lstm_c0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_5_batch_first_lstm_c0_squeeze_cast_fp16 = squeeze(axes = lstm_out_5_batch_first_lstm_c0_squeeze_axes_0, x = cn_3_cast_fp16)[name = tensor<string, []>("lstm_out_5_batch_first_lstm_c0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_5_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_5_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<string, []> lstm_out_5_batch_first_direction_0 = const()[name = tensor<string, []>("lstm_out_5_batch_first_direction_0"), val = tensor<string, []>("forward")];
            tensor<bool, []> lstm_out_5_batch_first_output_sequence_0 = const()[name = tensor<string, []>("lstm_out_5_batch_first_output_sequence_0"), val = tensor<bool, []>(true)];
            tensor<string, []> lstm_out_5_batch_first_recurrent_activation_0 = const()[name = tensor<string, []>("lstm_out_5_batch_first_recurrent_activation_0"), val = tensor<string, []>("sigmoid")];
            tensor<string, []> lstm_out_5_batch_first_cell_activation_0 = const()[name = tensor<string, []>("lstm_out_5_batch_first_cell_activation_0"), val = tensor<string, []>("tanh")];
            tensor<string, []> lstm_out_5_batch_first_activation_0 = const()[name = tensor<string, []>("lstm_out_5_batch_first_activation_0"), val = tensor<string, []>("tanh")];
            tensor<fp32, [1, 128]> lstm_out_5_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_5_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_5_batch_first_lstm_c0_squeeze_cast_fp16)[name = tensor<string, []>("cast_36")];
            tensor<fp32, [1, 128]> lstm_out_5_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_5_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_5_batch_first_lstm_h0_squeeze_cast_fp16)[name = tensor<string, []>("cast_37")];
            tensor<fp16, [1, 1, 128]> transpose_4_cast_fp16 = transpose(perm = transpose_4_perm_0, x = clip_11_cast_fp16)[name = tensor<string, []>("transpose_27")];
            tensor<fp32, [1, 1, 128]> transpose_4_cast_fp16_to_fp32 = cast(dtype = transpose_4_cast_fp16_to_fp32_dtype_0, x = transpose_4_cast_fp16)[name = tensor<string, []>("cast_38")];
            tensor<fp32, [1, 1, 128]> lstm_out_5_batch_first_0, tensor<fp32, [1, 128]> lstm_out_5_batch_first_1, tensor<fp32, [1, 128]> lstm_out_5_batch_first_2 = lstm(activation = lstm_out_5_batch_first_activation_0, bias = concat_0, cell_activation = lstm_out_5_batch_first_cell_activation_0, direction = lstm_out_5_batch_first_direction_0, initial_c = lstm_out_5_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32, initial_h = lstm_out_5_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32, output_sequence = lstm_out_5_batch_first_output_sequence_0, recurrent_activation = lstm_out_5_batch_first_recurrent_activation_0, weight_hh = concat_2, weight_ih = concat_1, x = transpose_4_cast_fp16_to_fp32)[name = tensor<string, []>("lstm_out_5_batch_first")];
            tensor<int32, [3]> transpose_5_perm_0 = const()[name = tensor<string, []>("transpose_5_perm_0"), val = tensor<int32, [3]>([1, 2, 0])];
            tensor<string, []> lstm_out_5_batch_first_0_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_5_batch_first_0_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<int32, [1]> hn_5_axes_0 = const()[name = tensor<string, []>("hn_5_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_5_batch_first_1_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_5_batch_first_1_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_5_batch_first_1_to_fp16 = cast(dtype = lstm_out_5_batch_first_1_to_fp16_dtype_0, x = lstm_out_5_batch_first_1)[name = tensor<string, []>("cast_34")];
            tensor<fp16, [1, 1, 128]> hn_5_cast_fp16 = expand_dims(axes = hn_5_axes_0, x = lstm_out_5_batch_first_1_to_fp16)[name = tensor<string, []>("hn_5_cast_fp16")];
            tensor<int32, [1]> cn_5_axes_0 = const()[name = tensor<string, []>("cn_5_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_5_batch_first_2_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_5_batch_first_2_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_5_batch_first_2_to_fp16 = cast(dtype = lstm_out_5_batch_first_2_to_fp16_dtype_0, x = lstm_out_5_batch_first_2)[name = tensor<string, []>("cast_33")];
            tensor<fp16, [1, 1, 128]> cn_5_cast_fp16 = expand_dims(axes = cn_5_axes_0, x = lstm_out_5_batch_first_2_to_fp16)[name = tensor<string, []>("cn_5_cast_fp16")];
            tensor<fp16, [1, 1, 128]> lstm_out_5_batch_first_0_to_fp16 = cast(dtype = lstm_out_5_batch_first_0_to_fp16_dtype_0, x = lstm_out_5_batch_first_0)[name = tensor<string, []>("cast_35")];
            tensor<fp16, [1, 128, 1]> transpose_5_cast_fp16 = transpose(perm = transpose_5_perm_0, x = lstm_out_5_batch_first_0_to_fp16)[name = tensor<string, []>("transpose_26")];
            tensor<fp16, [1, 128, 1]> input_81_cast_fp16 = relu(x = transpose_5_cast_fp16)[name = tensor<string, []>("input_81_cast_fp16")];
            tensor<string, []> input_83_pad_type_0 = const()[name = tensor<string, []>("input_83_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> input_83_strides_0 = const()[name = tensor<string, []>("input_83_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [2]> input_83_pad_0 = const()[name = tensor<string, []>("input_83_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> input_83_dilations_0 = const()[name = tensor<string, []>("input_83_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_83_groups_0 = const()[name = tensor<string, []>("input_83_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 1, 1]> input_83_cast_fp16 = conv(bias = decoder_final_conv_bias_to_fp16, dilations = input_83_dilations_0, groups = input_83_groups_0, pad = input_83_pad_0, pad_type = input_83_pad_type_0, strides = input_83_strides_0, weight = decoder_final_conv_weight_to_fp16, x = input_81_cast_fp16)[name = tensor<string, []>("input_83_cast_fp16")];
            tensor<fp16, [1, 1, 1]> var_566_cast_fp16 = sigmoid(x = input_83_cast_fp16)[name = tensor<string, []>("op_566_cast_fp16")];
            tensor<int32, [4]> x_43_pad_0 = const()[name = tensor<string, []>("x_43_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 64])];
            tensor<string, []> x_43_mode_0 = const()[name = tensor<string, []>("x_43_mode_0"), val = tensor<string, []>("reflect")];
            tensor<fp16, []> const_15_to_fp16 = const()[name = tensor<string, []>("const_15_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 640]> x_43_cast_fp16 = pad(constant_val = const_15_to_fp16, mode = x_43_mode_0, pad = x_43_pad_0, x = input_85_cast_fp16)[name = tensor<string, []>("x_43_cast_fp16")];
            tensor<int32, [1]> x_45_axes_0 = const()[name = tensor<string, []>("x_45_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 640]> x_45_cast_fp16 = expand_dims(axes = x_45_axes_0, x = x_43_cast_fp16)[name = tensor<string, []>("x_45_cast_fp16")];
            tensor<string, []> stft_out_7_pad_type_0 = const()[name = tensor<string, []>("stft_out_7_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> stft_out_7_strides_0 = const()[name = tensor<string, []>("stft_out_7_strides_0"), val = tensor<int32, [1]>([128])];
            tensor<int32, [2]> stft_out_7_pad_0 = const()[name = tensor<string, []>("stft_out_7_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> stft_out_7_dilations_0 = const()[name = tensor<string, []>("stft_out_7_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> stft_out_7_groups_0 = const()[name = tensor<string, []>("stft_out_7_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 258, 4]> stft_out_7_cast_fp16 = conv(dilations = stft_out_7_dilations_0, groups = stft_out_7_groups_0, pad = stft_out_7_pad_0, pad_type = stft_out_7_pad_type_0, strides = stft_out_7_strides_0, weight = stft_forward_basis_to_fp16, x = x_45_cast_fp16)[name = tensor<string, []>("stft_out_7_cast_fp16")];
            tensor<int32, [3]> var_594_begin_0 = const()[name = tensor<string, []>("op_594_begin_0"), val = tensor<int32, [3]>([0, 0, 0])];
            tensor<int32, [3]> var_594_end_0 = const()[name = tensor<string, []>("op_594_end_0"), val = tensor<int32, [3]>([1, 129, 4])];
            tensor<bool, [3]> var_594_end_mask_0 = const()[name = tensor<string, []>("op_594_end_mask_0"), val = tensor<bool, [3]>([true, false, true])];
            tensor<fp16, [1, 129, 4]> var_594_cast_fp16 = slice_by_index(begin = var_594_begin_0, end = var_594_end_0, end_mask = var_594_end_mask_0, x = stft_out_7_cast_fp16)[name = tensor<string, []>("op_594_cast_fp16")];
            tensor<int32, [3]> var_597_begin_0 = const()[name = tensor<string, []>("op_597_begin_0"), val = tensor<int32, [3]>([0, 129, 0])];
            tensor<int32, [3]> var_597_end_0 = const()[name = tensor<string, []>("op_597_end_0"), val = tensor<int32, [3]>([1, 258, 4])];
            tensor<bool, [3]> var_597_end_mask_0 = const()[name = tensor<string, []>("op_597_end_mask_0"), val = tensor<bool, [3]>([true, true, true])];
            tensor<fp16, [1, 129, 4]> var_597_cast_fp16 = slice_by_index(begin = var_597_begin_0, end = var_597_end_0, end_mask = var_597_end_mask_0, x = stft_out_7_cast_fp16)[name = tensor<string, []>("op_597_cast_fp16")];
            tensor<fp16, []> var_573_promoted_to_fp16 = const()[name = tensor<string, []>("op_573_promoted_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_599_cast_fp16 = pow(x = var_594_cast_fp16, y = var_573_promoted_to_fp16)[name = tensor<string, []>("op_599_cast_fp16")];
            tensor<fp16, []> var_573_promoted_1_to_fp16 = const()[name = tensor<string, []>("op_573_promoted_1_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_600_cast_fp16 = pow(x = var_597_cast_fp16, y = var_573_promoted_1_to_fp16)[name = tensor<string, []>("op_600_cast_fp16")];
            tensor<fp16, [1, 129, 4]> var_601_cast_fp16 = add(x = var_599_cast_fp16, y = var_600_cast_fp16)[name = tensor<string, []>("op_601_cast_fp16")];
            tensor<fp16, []> var_602_to_fp16 = const()[name = tensor<string, []>("op_602_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 129, 4]> var_603_cast_fp16 = add(x = var_601_cast_fp16, y = var_602_to_fp16)[name = tensor<string, []>("op_603_cast_fp16")];
            tensor<fp16, [1, 129, 4]> input_87_cast_fp16 = sqrt(x = var_603_cast_fp16)[name = tensor<string, []>("input_87_cast_fp16")];
            tensor<string, []> input_89_pad_type_0 = const()[name = tensor<string, []>("input_89_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_89_pad_0 = const()[name = tensor<string, []>("input_89_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_89_strides_0 = const()[name = tensor<string, []>("input_89_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_89_dilations_0 = const()[name = tensor<string, []>("input_89_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_89_groups_0 = const()[name = tensor<string, []>("input_89_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 4]> input_89_cast_fp16 = conv(bias = encoder_layers_0_bias_to_fp16, dilations = input_89_dilations_0, groups = input_89_groups_0, pad = input_89_pad_0, pad_type = input_89_pad_type_0, strides = input_89_strides_0, weight = encoder_layers_0_weight_to_fp16, x = input_87_cast_fp16)[name = tensor<string, []>("input_89_cast_fp16")];
            tensor<fp16, [1, 128, 4]> x_47_cast_fp16 = relu(x = input_89_cast_fp16)[name = tensor<string, []>("x_47_cast_fp16")];
            tensor<fp16, []> const_16_to_fp16 = const()[name = tensor<string, []>("const_16_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, []> var_606_to_fp16 = const()[name = tensor<string, []>("op_606_to_fp16"), val = tensor<fp16, []>(0x1.388p+13)];
            tensor<fp16, [1, 128, 4]> clip_12_cast_fp16 = clip(alpha = const_16_to_fp16, beta = var_606_to_fp16, x = x_47_cast_fp16)[name = tensor<string, []>("clip_12_cast_fp16")];
            tensor<string, []> input_93_pad_type_0 = const()[name = tensor<string, []>("input_93_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_93_pad_0 = const()[name = tensor<string, []>("input_93_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_93_strides_0 = const()[name = tensor<string, []>("input_93_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_93_dilations_0 = const()[name = tensor<string, []>("input_93_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_93_groups_0 = const()[name = tensor<string, []>("input_93_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 2]> input_93_cast_fp16 = conv(bias = encoder_layers_2_bias_to_fp16, dilations = input_93_dilations_0, groups = input_93_groups_0, pad = input_93_pad_0, pad_type = input_93_pad_type_0, strides = input_93_strides_0, weight = encoder_layers_2_weight_to_fp16, x = clip_12_cast_fp16)[name = tensor<string, []>("input_93_cast_fp16")];
            tensor<fp16, [1, 64, 2]> x_49_cast_fp16 = relu(x = input_93_cast_fp16)[name = tensor<string, []>("x_49_cast_fp16")];
            tensor<fp16, []> const_17_to_fp16 = const()[name = tensor<string, []>("const_17_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 2]> clip_13_cast_fp16 = clip(alpha = const_17_to_fp16, beta = var_606_to_fp16, x = x_49_cast_fp16)[name = tensor<string, []>("clip_13_cast_fp16")];
            tensor<string, []> input_97_pad_type_0 = const()[name = tensor<string, []>("input_97_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_97_pad_0 = const()[name = tensor<string, []>("input_97_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_97_strides_0 = const()[name = tensor<string, []>("input_97_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_97_dilations_0 = const()[name = tensor<string, []>("input_97_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_97_groups_0 = const()[name = tensor<string, []>("input_97_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1]> input_97_cast_fp16 = conv(bias = encoder_layers_4_bias_to_fp16, dilations = input_97_dilations_0, groups = input_97_groups_0, pad = input_97_pad_0, pad_type = input_97_pad_type_0, strides = input_97_strides_0, weight = encoder_layers_4_weight_to_fp16, x = clip_13_cast_fp16)[name = tensor<string, []>("input_97_cast_fp16")];
            tensor<fp16, [1, 64, 1]> x_51_cast_fp16 = relu(x = input_97_cast_fp16)[name = tensor<string, []>("x_51_cast_fp16")];
            tensor<fp16, []> const_18_to_fp16 = const()[name = tensor<string, []>("const_18_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 1]> clip_14_cast_fp16 = clip(alpha = const_18_to_fp16, beta = var_606_to_fp16, x = x_51_cast_fp16)[name = tensor<string, []>("clip_14_cast_fp16")];
            tensor<string, []> input_101_pad_type_0 = const()[name = tensor<string, []>("input_101_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_101_pad_0 = const()[name = tensor<string, []>("input_101_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_101_strides_0 = const()[name = tensor<string, []>("input_101_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_101_dilations_0 = const()[name = tensor<string, []>("input_101_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_101_groups_0 = const()[name = tensor<string, []>("input_101_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 1]> input_101_cast_fp16 = conv(bias = encoder_layers_6_bias_to_fp16, dilations = input_101_dilations_0, groups = input_101_groups_0, pad = input_101_pad_0, pad_type = input_101_pad_type_0, strides = input_101_strides_0, weight = encoder_layers_6_weight_to_fp16, x = clip_14_cast_fp16)[name = tensor<string, []>("input_101_cast_fp16")];
            tensor<fp16, [1, 128, 1]> x_53_cast_fp16 = relu(x = input_101_cast_fp16)[name = tensor<string, []>("x_53_cast_fp16")];
            tensor<fp16, []> const_19_to_fp16 = const()[name = tensor<string, []>("const_19_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 128, 1]> clip_15_cast_fp16 = clip(alpha = const_19_to_fp16, beta = var_606_to_fp16, x = x_53_cast_fp16)[name = tensor<string, []>("clip_15_cast_fp16")];
            tensor<int32, [3]> transpose_6_perm_0 = const()[name = tensor<string, []>("transpose_6_perm_0"), val = tensor<int32, [3]>([2, 0, 1])];
            tensor<string, []> transpose_6_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("transpose_6_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_7_batch_first_lstm_h0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_7_batch_first_lstm_h0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_7_batch_first_lstm_h0_squeeze_cast_fp16 = squeeze(axes = lstm_out_7_batch_first_lstm_h0_squeeze_axes_0, x = hn_5_cast_fp16)[name = tensor<string, []>("lstm_out_7_batch_first_lstm_h0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_7_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_7_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_7_batch_first_lstm_c0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_7_batch_first_lstm_c0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_7_batch_first_lstm_c0_squeeze_cast_fp16 = squeeze(axes = lstm_out_7_batch_first_lstm_c0_squeeze_axes_0, x = cn_5_cast_fp16)[name = tensor<string, []>("lstm_out_7_batch_first_lstm_c0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_7_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_7_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<string, []> lstm_out_7_batch_first_direction_0 = const()[name = tensor<string, []>("lstm_out_7_batch_first_direction_0"), val = tensor<string, []>("forward")];
            tensor<bool, []> lstm_out_7_batch_first_output_sequence_0 = const()[name = tensor<string, []>("lstm_out_7_batch_first_output_sequence_0"), val = tensor<bool, []>(true)];
            tensor<string, []> lstm_out_7_batch_first_recurrent_activation_0 = const()[name = tensor<string, []>("lstm_out_7_batch_first_recurrent_activation_0"), val = tensor<string, []>("sigmoid")];
            tensor<string, []> lstm_out_7_batch_first_cell_activation_0 = const()[name = tensor<string, []>("lstm_out_7_batch_first_cell_activation_0"), val = tensor<string, []>("tanh")];
            tensor<string, []> lstm_out_7_batch_first_activation_0 = const()[name = tensor<string, []>("lstm_out_7_batch_first_activation_0"), val = tensor<string, []>("tanh")];
            tensor<fp32, [1, 128]> lstm_out_7_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_7_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_7_batch_first_lstm_c0_squeeze_cast_fp16)[name = tensor<string, []>("cast_30")];
            tensor<fp32, [1, 128]> lstm_out_7_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_7_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_7_batch_first_lstm_h0_squeeze_cast_fp16)[name = tensor<string, []>("cast_31")];
            tensor<fp16, [1, 1, 128]> transpose_6_cast_fp16 = transpose(perm = transpose_6_perm_0, x = clip_15_cast_fp16)[name = tensor<string, []>("transpose_25")];
            tensor<fp32, [1, 1, 128]> transpose_6_cast_fp16_to_fp32 = cast(dtype = transpose_6_cast_fp16_to_fp32_dtype_0, x = transpose_6_cast_fp16)[name = tensor<string, []>("cast_32")];
            tensor<fp32, [1, 1, 128]> lstm_out_7_batch_first_0, tensor<fp32, [1, 128]> lstm_out_7_batch_first_1, tensor<fp32, [1, 128]> lstm_out_7_batch_first_2 = lstm(activation = lstm_out_7_batch_first_activation_0, bias = concat_0, cell_activation = lstm_out_7_batch_first_cell_activation_0, direction = lstm_out_7_batch_first_direction_0, initial_c = lstm_out_7_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32, initial_h = lstm_out_7_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32, output_sequence = lstm_out_7_batch_first_output_sequence_0, recurrent_activation = lstm_out_7_batch_first_recurrent_activation_0, weight_hh = concat_2, weight_ih = concat_1, x = transpose_6_cast_fp16_to_fp32)[name = tensor<string, []>("lstm_out_7_batch_first")];
            tensor<int32, [3]> transpose_7_perm_0 = const()[name = tensor<string, []>("transpose_7_perm_0"), val = tensor<int32, [3]>([1, 2, 0])];
            tensor<string, []> lstm_out_7_batch_first_0_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_7_batch_first_0_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<int32, [1]> hn_7_axes_0 = const()[name = tensor<string, []>("hn_7_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_7_batch_first_1_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_7_batch_first_1_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_7_batch_first_1_to_fp16 = cast(dtype = lstm_out_7_batch_first_1_to_fp16_dtype_0, x = lstm_out_7_batch_first_1)[name = tensor<string, []>("cast_28")];
            tensor<fp16, [1, 1, 128]> hn_7_cast_fp16 = expand_dims(axes = hn_7_axes_0, x = lstm_out_7_batch_first_1_to_fp16)[name = tensor<string, []>("hn_7_cast_fp16")];
            tensor<int32, [1]> cn_7_axes_0 = const()[name = tensor<string, []>("cn_7_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_7_batch_first_2_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_7_batch_first_2_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_7_batch_first_2_to_fp16 = cast(dtype = lstm_out_7_batch_first_2_to_fp16_dtype_0, x = lstm_out_7_batch_first_2)[name = tensor<string, []>("cast_27")];
            tensor<fp16, [1, 1, 128]> cn_7_cast_fp16 = expand_dims(axes = cn_7_axes_0, x = lstm_out_7_batch_first_2_to_fp16)[name = tensor<string, []>("cn_7_cast_fp16")];
            tensor<fp16, [1, 1, 128]> lstm_out_7_batch_first_0_to_fp16 = cast(dtype = lstm_out_7_batch_first_0_to_fp16_dtype_0, x = lstm_out_7_batch_first_0)[name = tensor<string, []>("cast_29")];
            tensor<fp16, [1, 128, 1]> transpose_7_cast_fp16 = transpose(perm = transpose_7_perm_0, x = lstm_out_7_batch_first_0_to_fp16)[name = tensor<string, []>("transpose_24")];
            tensor<fp16, [1, 128, 1]> input_109_cast_fp16 = relu(x = transpose_7_cast_fp16)[name = tensor<string, []>("input_109_cast_fp16")];
            tensor<string, []> input_111_pad_type_0 = const()[name = tensor<string, []>("input_111_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> input_111_strides_0 = const()[name = tensor<string, []>("input_111_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [2]> input_111_pad_0 = const()[name = tensor<string, []>("input_111_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> input_111_dilations_0 = const()[name = tensor<string, []>("input_111_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_111_groups_0 = const()[name = tensor<string, []>("input_111_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 1, 1]> input_111_cast_fp16 = conv(bias = decoder_final_conv_bias_to_fp16, dilations = input_111_dilations_0, groups = input_111_groups_0, pad = input_111_pad_0, pad_type = input_111_pad_type_0, strides = input_111_strides_0, weight = decoder_final_conv_weight_to_fp16, x = input_109_cast_fp16)[name = tensor<string, []>("input_111_cast_fp16")];
            tensor<fp16, [1, 1, 1]> var_690_cast_fp16 = sigmoid(x = input_111_cast_fp16)[name = tensor<string, []>("op_690_cast_fp16")];
            tensor<int32, [4]> x_57_pad_0 = const()[name = tensor<string, []>("x_57_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 64])];
            tensor<string, []> x_57_mode_0 = const()[name = tensor<string, []>("x_57_mode_0"), val = tensor<string, []>("reflect")];
            tensor<fp16, []> const_20_to_fp16 = const()[name = tensor<string, []>("const_20_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 640]> x_57_cast_fp16 = pad(constant_val = const_20_to_fp16, mode = x_57_mode_0, pad = x_57_pad_0, x = input_113_cast_fp16)[name = tensor<string, []>("x_57_cast_fp16")];
            tensor<int32, [1]> x_59_axes_0 = const()[name = tensor<string, []>("x_59_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 640]> x_59_cast_fp16 = expand_dims(axes = x_59_axes_0, x = x_57_cast_fp16)[name = tensor<string, []>("x_59_cast_fp16")];
            tensor<string, []> stft_out_9_pad_type_0 = const()[name = tensor<string, []>("stft_out_9_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> stft_out_9_strides_0 = const()[name = tensor<string, []>("stft_out_9_strides_0"), val = tensor<int32, [1]>([128])];
            tensor<int32, [2]> stft_out_9_pad_0 = const()[name = tensor<string, []>("stft_out_9_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> stft_out_9_dilations_0 = const()[name = tensor<string, []>("stft_out_9_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> stft_out_9_groups_0 = const()[name = tensor<string, []>("stft_out_9_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 258, 4]> stft_out_9_cast_fp16 = conv(dilations = stft_out_9_dilations_0, groups = stft_out_9_groups_0, pad = stft_out_9_pad_0, pad_type = stft_out_9_pad_type_0, strides = stft_out_9_strides_0, weight = stft_forward_basis_to_fp16, x = x_59_cast_fp16)[name = tensor<string, []>("stft_out_9_cast_fp16")];
            tensor<int32, [3]> var_718_begin_0 = const()[name = tensor<string, []>("op_718_begin_0"), val = tensor<int32, [3]>([0, 0, 0])];
            tensor<int32, [3]> var_718_end_0 = const()[name = tensor<string, []>("op_718_end_0"), val = tensor<int32, [3]>([1, 129, 4])];
            tensor<bool, [3]> var_718_end_mask_0 = const()[name = tensor<string, []>("op_718_end_mask_0"), val = tensor<bool, [3]>([true, false, true])];
            tensor<fp16, [1, 129, 4]> var_718_cast_fp16 = slice_by_index(begin = var_718_begin_0, end = var_718_end_0, end_mask = var_718_end_mask_0, x = stft_out_9_cast_fp16)[name = tensor<string, []>("op_718_cast_fp16")];
            tensor<int32, [3]> var_721_begin_0 = const()[name = tensor<string, []>("op_721_begin_0"), val = tensor<int32, [3]>([0, 129, 0])];
            tensor<int32, [3]> var_721_end_0 = const()[name = tensor<string, []>("op_721_end_0"), val = tensor<int32, [3]>([1, 258, 4])];
            tensor<bool, [3]> var_721_end_mask_0 = const()[name = tensor<string, []>("op_721_end_mask_0"), val = tensor<bool, [3]>([true, true, true])];
            tensor<fp16, [1, 129, 4]> var_721_cast_fp16 = slice_by_index(begin = var_721_begin_0, end = var_721_end_0, end_mask = var_721_end_mask_0, x = stft_out_9_cast_fp16)[name = tensor<string, []>("op_721_cast_fp16")];
            tensor<fp16, []> var_697_promoted_to_fp16 = const()[name = tensor<string, []>("op_697_promoted_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_723_cast_fp16 = pow(x = var_718_cast_fp16, y = var_697_promoted_to_fp16)[name = tensor<string, []>("op_723_cast_fp16")];
            tensor<fp16, []> var_697_promoted_1_to_fp16 = const()[name = tensor<string, []>("op_697_promoted_1_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_724_cast_fp16 = pow(x = var_721_cast_fp16, y = var_697_promoted_1_to_fp16)[name = tensor<string, []>("op_724_cast_fp16")];
            tensor<fp16, [1, 129, 4]> var_725_cast_fp16 = add(x = var_723_cast_fp16, y = var_724_cast_fp16)[name = tensor<string, []>("op_725_cast_fp16")];
            tensor<fp16, []> var_726_to_fp16 = const()[name = tensor<string, []>("op_726_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 129, 4]> var_727_cast_fp16 = add(x = var_725_cast_fp16, y = var_726_to_fp16)[name = tensor<string, []>("op_727_cast_fp16")];
            tensor<fp16, [1, 129, 4]> input_115_cast_fp16 = sqrt(x = var_727_cast_fp16)[name = tensor<string, []>("input_115_cast_fp16")];
            tensor<string, []> input_117_pad_type_0 = const()[name = tensor<string, []>("input_117_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_117_pad_0 = const()[name = tensor<string, []>("input_117_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_117_strides_0 = const()[name = tensor<string, []>("input_117_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_117_dilations_0 = const()[name = tensor<string, []>("input_117_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_117_groups_0 = const()[name = tensor<string, []>("input_117_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 4]> input_117_cast_fp16 = conv(bias = encoder_layers_0_bias_to_fp16, dilations = input_117_dilations_0, groups = input_117_groups_0, pad = input_117_pad_0, pad_type = input_117_pad_type_0, strides = input_117_strides_0, weight = encoder_layers_0_weight_to_fp16, x = input_115_cast_fp16)[name = tensor<string, []>("input_117_cast_fp16")];
            tensor<fp16, [1, 128, 4]> x_61_cast_fp16 = relu(x = input_117_cast_fp16)[name = tensor<string, []>("x_61_cast_fp16")];
            tensor<fp16, []> const_21_to_fp16 = const()[name = tensor<string, []>("const_21_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, []> var_730_to_fp16 = const()[name = tensor<string, []>("op_730_to_fp16"), val = tensor<fp16, []>(0x1.388p+13)];
            tensor<fp16, [1, 128, 4]> clip_16_cast_fp16 = clip(alpha = const_21_to_fp16, beta = var_730_to_fp16, x = x_61_cast_fp16)[name = tensor<string, []>("clip_16_cast_fp16")];
            tensor<string, []> input_121_pad_type_0 = const()[name = tensor<string, []>("input_121_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_121_pad_0 = const()[name = tensor<string, []>("input_121_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_121_strides_0 = const()[name = tensor<string, []>("input_121_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_121_dilations_0 = const()[name = tensor<string, []>("input_121_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_121_groups_0 = const()[name = tensor<string, []>("input_121_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 2]> input_121_cast_fp16 = conv(bias = encoder_layers_2_bias_to_fp16, dilations = input_121_dilations_0, groups = input_121_groups_0, pad = input_121_pad_0, pad_type = input_121_pad_type_0, strides = input_121_strides_0, weight = encoder_layers_2_weight_to_fp16, x = clip_16_cast_fp16)[name = tensor<string, []>("input_121_cast_fp16")];
            tensor<fp16, [1, 64, 2]> x_63_cast_fp16 = relu(x = input_121_cast_fp16)[name = tensor<string, []>("x_63_cast_fp16")];
            tensor<fp16, []> const_22_to_fp16 = const()[name = tensor<string, []>("const_22_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 2]> clip_17_cast_fp16 = clip(alpha = const_22_to_fp16, beta = var_730_to_fp16, x = x_63_cast_fp16)[name = tensor<string, []>("clip_17_cast_fp16")];
            tensor<string, []> input_125_pad_type_0 = const()[name = tensor<string, []>("input_125_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_125_pad_0 = const()[name = tensor<string, []>("input_125_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_125_strides_0 = const()[name = tensor<string, []>("input_125_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_125_dilations_0 = const()[name = tensor<string, []>("input_125_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_125_groups_0 = const()[name = tensor<string, []>("input_125_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1]> input_125_cast_fp16 = conv(bias = encoder_layers_4_bias_to_fp16, dilations = input_125_dilations_0, groups = input_125_groups_0, pad = input_125_pad_0, pad_type = input_125_pad_type_0, strides = input_125_strides_0, weight = encoder_layers_4_weight_to_fp16, x = clip_17_cast_fp16)[name = tensor<string, []>("input_125_cast_fp16")];
            tensor<fp16, [1, 64, 1]> x_65_cast_fp16 = relu(x = input_125_cast_fp16)[name = tensor<string, []>("x_65_cast_fp16")];
            tensor<fp16, []> const_23_to_fp16 = const()[name = tensor<string, []>("const_23_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 1]> clip_18_cast_fp16 = clip(alpha = const_23_to_fp16, beta = var_730_to_fp16, x = x_65_cast_fp16)[name = tensor<string, []>("clip_18_cast_fp16")];
            tensor<string, []> input_129_pad_type_0 = const()[name = tensor<string, []>("input_129_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_129_pad_0 = const()[name = tensor<string, []>("input_129_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_129_strides_0 = const()[name = tensor<string, []>("input_129_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_129_dilations_0 = const()[name = tensor<string, []>("input_129_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_129_groups_0 = const()[name = tensor<string, []>("input_129_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 1]> input_129_cast_fp16 = conv(bias = encoder_layers_6_bias_to_fp16, dilations = input_129_dilations_0, groups = input_129_groups_0, pad = input_129_pad_0, pad_type = input_129_pad_type_0, strides = input_129_strides_0, weight = encoder_layers_6_weight_to_fp16, x = clip_18_cast_fp16)[name = tensor<string, []>("input_129_cast_fp16")];
            tensor<fp16, [1, 128, 1]> x_67_cast_fp16 = relu(x = input_129_cast_fp16)[name = tensor<string, []>("x_67_cast_fp16")];
            tensor<fp16, []> const_24_to_fp16 = const()[name = tensor<string, []>("const_24_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 128, 1]> clip_19_cast_fp16 = clip(alpha = const_24_to_fp16, beta = var_730_to_fp16, x = x_67_cast_fp16)[name = tensor<string, []>("clip_19_cast_fp16")];
            tensor<int32, [3]> transpose_8_perm_0 = const()[name = tensor<string, []>("transpose_8_perm_0"), val = tensor<int32, [3]>([2, 0, 1])];
            tensor<string, []> transpose_8_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("transpose_8_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_9_batch_first_lstm_h0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_9_batch_first_lstm_h0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_9_batch_first_lstm_h0_squeeze_cast_fp16 = squeeze(axes = lstm_out_9_batch_first_lstm_h0_squeeze_axes_0, x = hn_7_cast_fp16)[name = tensor<string, []>("lstm_out_9_batch_first_lstm_h0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_9_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_9_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_9_batch_first_lstm_c0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_9_batch_first_lstm_c0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_9_batch_first_lstm_c0_squeeze_cast_fp16 = squeeze(axes = lstm_out_9_batch_first_lstm_c0_squeeze_axes_0, x = cn_7_cast_fp16)[name = tensor<string, []>("lstm_out_9_batch_first_lstm_c0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_9_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_9_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<string, []> lstm_out_9_batch_first_direction_0 = const()[name = tensor<string, []>("lstm_out_9_batch_first_direction_0"), val = tensor<string, []>("forward")];
            tensor<bool, []> lstm_out_9_batch_first_output_sequence_0 = const()[name = tensor<string, []>("lstm_out_9_batch_first_output_sequence_0"), val = tensor<bool, []>(true)];
            tensor<string, []> lstm_out_9_batch_first_recurrent_activation_0 = const()[name = tensor<string, []>("lstm_out_9_batch_first_recurrent_activation_0"), val = tensor<string, []>("sigmoid")];
            tensor<string, []> lstm_out_9_batch_first_cell_activation_0 = const()[name = tensor<string, []>("lstm_out_9_batch_first_cell_activation_0"), val = tensor<string, []>("tanh")];
            tensor<string, []> lstm_out_9_batch_first_activation_0 = const()[name = tensor<string, []>("lstm_out_9_batch_first_activation_0"), val = tensor<string, []>("tanh")];
            tensor<fp32, [1, 128]> lstm_out_9_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_9_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_9_batch_first_lstm_c0_squeeze_cast_fp16)[name = tensor<string, []>("cast_24")];
            tensor<fp32, [1, 128]> lstm_out_9_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_9_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_9_batch_first_lstm_h0_squeeze_cast_fp16)[name = tensor<string, []>("cast_25")];
            tensor<fp16, [1, 1, 128]> transpose_8_cast_fp16 = transpose(perm = transpose_8_perm_0, x = clip_19_cast_fp16)[name = tensor<string, []>("transpose_23")];
            tensor<fp32, [1, 1, 128]> transpose_8_cast_fp16_to_fp32 = cast(dtype = transpose_8_cast_fp16_to_fp32_dtype_0, x = transpose_8_cast_fp16)[name = tensor<string, []>("cast_26")];
            tensor<fp32, [1, 1, 128]> lstm_out_9_batch_first_0, tensor<fp32, [1, 128]> lstm_out_9_batch_first_1, tensor<fp32, [1, 128]> lstm_out_9_batch_first_2 = lstm(activation = lstm_out_9_batch_first_activation_0, bias = concat_0, cell_activation = lstm_out_9_batch_first_cell_activation_0, direction = lstm_out_9_batch_first_direction_0, initial_c = lstm_out_9_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32, initial_h = lstm_out_9_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32, output_sequence = lstm_out_9_batch_first_output_sequence_0, recurrent_activation = lstm_out_9_batch_first_recurrent_activation_0, weight_hh = concat_2, weight_ih = concat_1, x = transpose_8_cast_fp16_to_fp32)[name = tensor<string, []>("lstm_out_9_batch_first")];
            tensor<int32, [3]> transpose_9_perm_0 = const()[name = tensor<string, []>("transpose_9_perm_0"), val = tensor<int32, [3]>([1, 2, 0])];
            tensor<string, []> lstm_out_9_batch_first_0_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_9_batch_first_0_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<int32, [1]> hn_9_axes_0 = const()[name = tensor<string, []>("hn_9_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_9_batch_first_1_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_9_batch_first_1_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_9_batch_first_1_to_fp16 = cast(dtype = lstm_out_9_batch_first_1_to_fp16_dtype_0, x = lstm_out_9_batch_first_1)[name = tensor<string, []>("cast_22")];
            tensor<fp16, [1, 1, 128]> hn_9_cast_fp16 = expand_dims(axes = hn_9_axes_0, x = lstm_out_9_batch_first_1_to_fp16)[name = tensor<string, []>("hn_9_cast_fp16")];
            tensor<int32, [1]> cn_9_axes_0 = const()[name = tensor<string, []>("cn_9_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_9_batch_first_2_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_9_batch_first_2_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_9_batch_first_2_to_fp16 = cast(dtype = lstm_out_9_batch_first_2_to_fp16_dtype_0, x = lstm_out_9_batch_first_2)[name = tensor<string, []>("cast_21")];
            tensor<fp16, [1, 1, 128]> cn_9_cast_fp16 = expand_dims(axes = cn_9_axes_0, x = lstm_out_9_batch_first_2_to_fp16)[name = tensor<string, []>("cn_9_cast_fp16")];
            tensor<fp16, [1, 1, 128]> lstm_out_9_batch_first_0_to_fp16 = cast(dtype = lstm_out_9_batch_first_0_to_fp16_dtype_0, x = lstm_out_9_batch_first_0)[name = tensor<string, []>("cast_23")];
            tensor<fp16, [1, 128, 1]> transpose_9_cast_fp16 = transpose(perm = transpose_9_perm_0, x = lstm_out_9_batch_first_0_to_fp16)[name = tensor<string, []>("transpose_22")];
            tensor<fp16, [1, 128, 1]> input_137_cast_fp16 = relu(x = transpose_9_cast_fp16)[name = tensor<string, []>("input_137_cast_fp16")];
            tensor<string, []> input_139_pad_type_0 = const()[name = tensor<string, []>("input_139_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> input_139_strides_0 = const()[name = tensor<string, []>("input_139_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [2]> input_139_pad_0 = const()[name = tensor<string, []>("input_139_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> input_139_dilations_0 = const()[name = tensor<string, []>("input_139_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_139_groups_0 = const()[name = tensor<string, []>("input_139_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 1, 1]> input_139_cast_fp16 = conv(bias = decoder_final_conv_bias_to_fp16, dilations = input_139_dilations_0, groups = input_139_groups_0, pad = input_139_pad_0, pad_type = input_139_pad_type_0, strides = input_139_strides_0, weight = decoder_final_conv_weight_to_fp16, x = input_137_cast_fp16)[name = tensor<string, []>("input_139_cast_fp16")];
            tensor<fp16, [1, 1, 1]> var_814_cast_fp16 = sigmoid(x = input_139_cast_fp16)[name = tensor<string, []>("op_814_cast_fp16")];
            tensor<int32, [4]> x_71_pad_0 = const()[name = tensor<string, []>("x_71_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 64])];
            tensor<string, []> x_71_mode_0 = const()[name = tensor<string, []>("x_71_mode_0"), val = tensor<string, []>("reflect")];
            tensor<fp16, []> const_25_to_fp16 = const()[name = tensor<string, []>("const_25_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 640]> x_71_cast_fp16 = pad(constant_val = const_25_to_fp16, mode = x_71_mode_0, pad = x_71_pad_0, x = input_141_cast_fp16)[name = tensor<string, []>("x_71_cast_fp16")];
            tensor<int32, [1]> x_73_axes_0 = const()[name = tensor<string, []>("x_73_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 640]> x_73_cast_fp16 = expand_dims(axes = x_73_axes_0, x = x_71_cast_fp16)[name = tensor<string, []>("x_73_cast_fp16")];
            tensor<string, []> stft_out_11_pad_type_0 = const()[name = tensor<string, []>("stft_out_11_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> stft_out_11_strides_0 = const()[name = tensor<string, []>("stft_out_11_strides_0"), val = tensor<int32, [1]>([128])];
            tensor<int32, [2]> stft_out_11_pad_0 = const()[name = tensor<string, []>("stft_out_11_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> stft_out_11_dilations_0 = const()[name = tensor<string, []>("stft_out_11_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> stft_out_11_groups_0 = const()[name = tensor<string, []>("stft_out_11_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 258, 4]> stft_out_11_cast_fp16 = conv(dilations = stft_out_11_dilations_0, groups = stft_out_11_groups_0, pad = stft_out_11_pad_0, pad_type = stft_out_11_pad_type_0, strides = stft_out_11_strides_0, weight = stft_forward_basis_to_fp16, x = x_73_cast_fp16)[name = tensor<string, []>("stft_out_11_cast_fp16")];
            tensor<int32, [3]> var_842_begin_0 = const()[name = tensor<string, []>("op_842_begin_0"), val = tensor<int32, [3]>([0, 0, 0])];
            tensor<int32, [3]> var_842_end_0 = const()[name = tensor<string, []>("op_842_end_0"), val = tensor<int32, [3]>([1, 129, 4])];
            tensor<bool, [3]> var_842_end_mask_0 = const()[name = tensor<string, []>("op_842_end_mask_0"), val = tensor<bool, [3]>([true, false, true])];
            tensor<fp16, [1, 129, 4]> var_842_cast_fp16 = slice_by_index(begin = var_842_begin_0, end = var_842_end_0, end_mask = var_842_end_mask_0, x = stft_out_11_cast_fp16)[name = tensor<string, []>("op_842_cast_fp16")];
            tensor<int32, [3]> var_845_begin_0 = const()[name = tensor<string, []>("op_845_begin_0"), val = tensor<int32, [3]>([0, 129, 0])];
            tensor<int32, [3]> var_845_end_0 = const()[name = tensor<string, []>("op_845_end_0"), val = tensor<int32, [3]>([1, 258, 4])];
            tensor<bool, [3]> var_845_end_mask_0 = const()[name = tensor<string, []>("op_845_end_mask_0"), val = tensor<bool, [3]>([true, true, true])];
            tensor<fp16, [1, 129, 4]> var_845_cast_fp16 = slice_by_index(begin = var_845_begin_0, end = var_845_end_0, end_mask = var_845_end_mask_0, x = stft_out_11_cast_fp16)[name = tensor<string, []>("op_845_cast_fp16")];
            tensor<fp16, []> var_821_promoted_to_fp16 = const()[name = tensor<string, []>("op_821_promoted_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_847_cast_fp16 = pow(x = var_842_cast_fp16, y = var_821_promoted_to_fp16)[name = tensor<string, []>("op_847_cast_fp16")];
            tensor<fp16, []> var_821_promoted_1_to_fp16 = const()[name = tensor<string, []>("op_821_promoted_1_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_848_cast_fp16 = pow(x = var_845_cast_fp16, y = var_821_promoted_1_to_fp16)[name = tensor<string, []>("op_848_cast_fp16")];
            tensor<fp16, [1, 129, 4]> var_849_cast_fp16 = add(x = var_847_cast_fp16, y = var_848_cast_fp16)[name = tensor<string, []>("op_849_cast_fp16")];
            tensor<fp16, []> var_850_to_fp16 = const()[name = tensor<string, []>("op_850_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 129, 4]> var_851_cast_fp16 = add(x = var_849_cast_fp16, y = var_850_to_fp16)[name = tensor<string, []>("op_851_cast_fp16")];
            tensor<fp16, [1, 129, 4]> input_143_cast_fp16 = sqrt(x = var_851_cast_fp16)[name = tensor<string, []>("input_143_cast_fp16")];
            tensor<string, []> input_145_pad_type_0 = const()[name = tensor<string, []>("input_145_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_145_pad_0 = const()[name = tensor<string, []>("input_145_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_145_strides_0 = const()[name = tensor<string, []>("input_145_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_145_dilations_0 = const()[name = tensor<string, []>("input_145_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_145_groups_0 = const()[name = tensor<string, []>("input_145_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 4]> input_145_cast_fp16 = conv(bias = encoder_layers_0_bias_to_fp16, dilations = input_145_dilations_0, groups = input_145_groups_0, pad = input_145_pad_0, pad_type = input_145_pad_type_0, strides = input_145_strides_0, weight = encoder_layers_0_weight_to_fp16, x = input_143_cast_fp16)[name = tensor<string, []>("input_145_cast_fp16")];
            tensor<fp16, [1, 128, 4]> x_75_cast_fp16 = relu(x = input_145_cast_fp16)[name = tensor<string, []>("x_75_cast_fp16")];
            tensor<fp16, []> const_26_to_fp16 = const()[name = tensor<string, []>("const_26_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, []> var_854_to_fp16 = const()[name = tensor<string, []>("op_854_to_fp16"), val = tensor<fp16, []>(0x1.388p+13)];
            tensor<fp16, [1, 128, 4]> clip_20_cast_fp16 = clip(alpha = const_26_to_fp16, beta = var_854_to_fp16, x = x_75_cast_fp16)[name = tensor<string, []>("clip_20_cast_fp16")];
            tensor<string, []> input_149_pad_type_0 = const()[name = tensor<string, []>("input_149_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_149_pad_0 = const()[name = tensor<string, []>("input_149_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_149_strides_0 = const()[name = tensor<string, []>("input_149_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_149_dilations_0 = const()[name = tensor<string, []>("input_149_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_149_groups_0 = const()[name = tensor<string, []>("input_149_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 2]> input_149_cast_fp16 = conv(bias = encoder_layers_2_bias_to_fp16, dilations = input_149_dilations_0, groups = input_149_groups_0, pad = input_149_pad_0, pad_type = input_149_pad_type_0, strides = input_149_strides_0, weight = encoder_layers_2_weight_to_fp16, x = clip_20_cast_fp16)[name = tensor<string, []>("input_149_cast_fp16")];
            tensor<fp16, [1, 64, 2]> x_77_cast_fp16 = relu(x = input_149_cast_fp16)[name = tensor<string, []>("x_77_cast_fp16")];
            tensor<fp16, []> const_27_to_fp16 = const()[name = tensor<string, []>("const_27_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 2]> clip_21_cast_fp16 = clip(alpha = const_27_to_fp16, beta = var_854_to_fp16, x = x_77_cast_fp16)[name = tensor<string, []>("clip_21_cast_fp16")];
            tensor<string, []> input_153_pad_type_0 = const()[name = tensor<string, []>("input_153_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_153_pad_0 = const()[name = tensor<string, []>("input_153_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_153_strides_0 = const()[name = tensor<string, []>("input_153_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_153_dilations_0 = const()[name = tensor<string, []>("input_153_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_153_groups_0 = const()[name = tensor<string, []>("input_153_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1]> input_153_cast_fp16 = conv(bias = encoder_layers_4_bias_to_fp16, dilations = input_153_dilations_0, groups = input_153_groups_0, pad = input_153_pad_0, pad_type = input_153_pad_type_0, strides = input_153_strides_0, weight = encoder_layers_4_weight_to_fp16, x = clip_21_cast_fp16)[name = tensor<string, []>("input_153_cast_fp16")];
            tensor<fp16, [1, 64, 1]> x_79_cast_fp16 = relu(x = input_153_cast_fp16)[name = tensor<string, []>("x_79_cast_fp16")];
            tensor<fp16, []> const_28_to_fp16 = const()[name = tensor<string, []>("const_28_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 1]> clip_22_cast_fp16 = clip(alpha = const_28_to_fp16, beta = var_854_to_fp16, x = x_79_cast_fp16)[name = tensor<string, []>("clip_22_cast_fp16")];
            tensor<string, []> input_157_pad_type_0 = const()[name = tensor<string, []>("input_157_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_157_pad_0 = const()[name = tensor<string, []>("input_157_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_157_strides_0 = const()[name = tensor<string, []>("input_157_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_157_dilations_0 = const()[name = tensor<string, []>("input_157_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_157_groups_0 = const()[name = tensor<string, []>("input_157_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 1]> input_157_cast_fp16 = conv(bias = encoder_layers_6_bias_to_fp16, dilations = input_157_dilations_0, groups = input_157_groups_0, pad = input_157_pad_0, pad_type = input_157_pad_type_0, strides = input_157_strides_0, weight = encoder_layers_6_weight_to_fp16, x = clip_22_cast_fp16)[name = tensor<string, []>("input_157_cast_fp16")];
            tensor<fp16, [1, 128, 1]> x_81_cast_fp16 = relu(x = input_157_cast_fp16)[name = tensor<string, []>("x_81_cast_fp16")];
            tensor<fp16, []> const_29_to_fp16 = const()[name = tensor<string, []>("const_29_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 128, 1]> clip_23_cast_fp16 = clip(alpha = const_29_to_fp16, beta = var_854_to_fp16, x = x_81_cast_fp16)[name = tensor<string, []>("clip_23_cast_fp16")];
            tensor<int32, [3]> transpose_10_perm_0 = const()[name = tensor<string, []>("transpose_10_perm_0"), val = tensor<int32, [3]>([2, 0, 1])];
            tensor<string, []> transpose_10_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("transpose_10_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_11_batch_first_lstm_h0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_11_batch_first_lstm_h0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_11_batch_first_lstm_h0_squeeze_cast_fp16 = squeeze(axes = lstm_out_11_batch_first_lstm_h0_squeeze_axes_0, x = hn_9_cast_fp16)[name = tensor<string, []>("lstm_out_11_batch_first_lstm_h0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_11_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_11_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_11_batch_first_lstm_c0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_11_batch_first_lstm_c0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_11_batch_first_lstm_c0_squeeze_cast_fp16 = squeeze(axes = lstm_out_11_batch_first_lstm_c0_squeeze_axes_0, x = cn_9_cast_fp16)[name = tensor<string, []>("lstm_out_11_batch_first_lstm_c0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_11_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_11_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<string, []> lstm_out_11_batch_first_direction_0 = const()[name = tensor<string, []>("lstm_out_11_batch_first_direction_0"), val = tensor<string, []>("forward")];
            tensor<bool, []> lstm_out_11_batch_first_output_sequence_0 = const()[name = tensor<string, []>("lstm_out_11_batch_first_output_sequence_0"), val = tensor<bool, []>(true)];
            tensor<string, []> lstm_out_11_batch_first_recurrent_activation_0 = const()[name = tensor<string, []>("lstm_out_11_batch_first_recurrent_activation_0"), val = tensor<string, []>("sigmoid")];
            tensor<string, []> lstm_out_11_batch_first_cell_activation_0 = const()[name = tensor<string, []>("lstm_out_11_batch_first_cell_activation_0"), val = tensor<string, []>("tanh")];
            tensor<string, []> lstm_out_11_batch_first_activation_0 = const()[name = tensor<string, []>("lstm_out_11_batch_first_activation_0"), val = tensor<string, []>("tanh")];
            tensor<fp32, [1, 128]> lstm_out_11_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_11_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_11_batch_first_lstm_c0_squeeze_cast_fp16)[name = tensor<string, []>("cast_18")];
            tensor<fp32, [1, 128]> lstm_out_11_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_11_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_11_batch_first_lstm_h0_squeeze_cast_fp16)[name = tensor<string, []>("cast_19")];
            tensor<fp16, [1, 1, 128]> transpose_10_cast_fp16 = transpose(perm = transpose_10_perm_0, x = clip_23_cast_fp16)[name = tensor<string, []>("transpose_21")];
            tensor<fp32, [1, 1, 128]> transpose_10_cast_fp16_to_fp32 = cast(dtype = transpose_10_cast_fp16_to_fp32_dtype_0, x = transpose_10_cast_fp16)[name = tensor<string, []>("cast_20")];
            tensor<fp32, [1, 1, 128]> lstm_out_11_batch_first_0, tensor<fp32, [1, 128]> lstm_out_11_batch_first_1, tensor<fp32, [1, 128]> lstm_out_11_batch_first_2 = lstm(activation = lstm_out_11_batch_first_activation_0, bias = concat_0, cell_activation = lstm_out_11_batch_first_cell_activation_0, direction = lstm_out_11_batch_first_direction_0, initial_c = lstm_out_11_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32, initial_h = lstm_out_11_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32, output_sequence = lstm_out_11_batch_first_output_sequence_0, recurrent_activation = lstm_out_11_batch_first_recurrent_activation_0, weight_hh = concat_2, weight_ih = concat_1, x = transpose_10_cast_fp16_to_fp32)[name = tensor<string, []>("lstm_out_11_batch_first")];
            tensor<int32, [3]> transpose_11_perm_0 = const()[name = tensor<string, []>("transpose_11_perm_0"), val = tensor<int32, [3]>([1, 2, 0])];
            tensor<string, []> lstm_out_11_batch_first_0_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_11_batch_first_0_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<int32, [1]> hn_11_axes_0 = const()[name = tensor<string, []>("hn_11_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_11_batch_first_1_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_11_batch_first_1_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_11_batch_first_1_to_fp16 = cast(dtype = lstm_out_11_batch_first_1_to_fp16_dtype_0, x = lstm_out_11_batch_first_1)[name = tensor<string, []>("cast_16")];
            tensor<fp16, [1, 1, 128]> hn_11_cast_fp16 = expand_dims(axes = hn_11_axes_0, x = lstm_out_11_batch_first_1_to_fp16)[name = tensor<string, []>("hn_11_cast_fp16")];
            tensor<int32, [1]> cn_11_axes_0 = const()[name = tensor<string, []>("cn_11_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_11_batch_first_2_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_11_batch_first_2_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_11_batch_first_2_to_fp16 = cast(dtype = lstm_out_11_batch_first_2_to_fp16_dtype_0, x = lstm_out_11_batch_first_2)[name = tensor<string, []>("cast_15")];
            tensor<fp16, [1, 1, 128]> cn_11_cast_fp16 = expand_dims(axes = cn_11_axes_0, x = lstm_out_11_batch_first_2_to_fp16)[name = tensor<string, []>("cn_11_cast_fp16")];
            tensor<fp16, [1, 1, 128]> lstm_out_11_batch_first_0_to_fp16 = cast(dtype = lstm_out_11_batch_first_0_to_fp16_dtype_0, x = lstm_out_11_batch_first_0)[name = tensor<string, []>("cast_17")];
            tensor<fp16, [1, 128, 1]> transpose_11_cast_fp16 = transpose(perm = transpose_11_perm_0, x = lstm_out_11_batch_first_0_to_fp16)[name = tensor<string, []>("transpose_20")];
            tensor<fp16, [1, 128, 1]> input_165_cast_fp16 = relu(x = transpose_11_cast_fp16)[name = tensor<string, []>("input_165_cast_fp16")];
            tensor<string, []> input_167_pad_type_0 = const()[name = tensor<string, []>("input_167_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> input_167_strides_0 = const()[name = tensor<string, []>("input_167_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [2]> input_167_pad_0 = const()[name = tensor<string, []>("input_167_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> input_167_dilations_0 = const()[name = tensor<string, []>("input_167_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_167_groups_0 = const()[name = tensor<string, []>("input_167_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 1, 1]> input_167_cast_fp16 = conv(bias = decoder_final_conv_bias_to_fp16, dilations = input_167_dilations_0, groups = input_167_groups_0, pad = input_167_pad_0, pad_type = input_167_pad_type_0, strides = input_167_strides_0, weight = decoder_final_conv_weight_to_fp16, x = input_165_cast_fp16)[name = tensor<string, []>("input_167_cast_fp16")];
            tensor<fp16, [1, 1, 1]> var_938_cast_fp16 = sigmoid(x = input_167_cast_fp16)[name = tensor<string, []>("op_938_cast_fp16")];
            tensor<int32, [4]> x_85_pad_0 = const()[name = tensor<string, []>("x_85_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 64])];
            tensor<string, []> x_85_mode_0 = const()[name = tensor<string, []>("x_85_mode_0"), val = tensor<string, []>("reflect")];
            tensor<fp16, []> const_30_to_fp16 = const()[name = tensor<string, []>("const_30_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 640]> x_85_cast_fp16 = pad(constant_val = const_30_to_fp16, mode = x_85_mode_0, pad = x_85_pad_0, x = input_169_cast_fp16)[name = tensor<string, []>("x_85_cast_fp16")];
            tensor<int32, [1]> x_87_axes_0 = const()[name = tensor<string, []>("x_87_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 640]> x_87_cast_fp16 = expand_dims(axes = x_87_axes_0, x = x_85_cast_fp16)[name = tensor<string, []>("x_87_cast_fp16")];
            tensor<string, []> stft_out_13_pad_type_0 = const()[name = tensor<string, []>("stft_out_13_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> stft_out_13_strides_0 = const()[name = tensor<string, []>("stft_out_13_strides_0"), val = tensor<int32, [1]>([128])];
            tensor<int32, [2]> stft_out_13_pad_0 = const()[name = tensor<string, []>("stft_out_13_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> stft_out_13_dilations_0 = const()[name = tensor<string, []>("stft_out_13_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> stft_out_13_groups_0 = const()[name = tensor<string, []>("stft_out_13_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 258, 4]> stft_out_13_cast_fp16 = conv(dilations = stft_out_13_dilations_0, groups = stft_out_13_groups_0, pad = stft_out_13_pad_0, pad_type = stft_out_13_pad_type_0, strides = stft_out_13_strides_0, weight = stft_forward_basis_to_fp16, x = x_87_cast_fp16)[name = tensor<string, []>("stft_out_13_cast_fp16")];
            tensor<int32, [3]> var_966_begin_0 = const()[name = tensor<string, []>("op_966_begin_0"), val = tensor<int32, [3]>([0, 0, 0])];
            tensor<int32, [3]> var_966_end_0 = const()[name = tensor<string, []>("op_966_end_0"), val = tensor<int32, [3]>([1, 129, 4])];
            tensor<bool, [3]> var_966_end_mask_0 = const()[name = tensor<string, []>("op_966_end_mask_0"), val = tensor<bool, [3]>([true, false, true])];
            tensor<fp16, [1, 129, 4]> var_966_cast_fp16 = slice_by_index(begin = var_966_begin_0, end = var_966_end_0, end_mask = var_966_end_mask_0, x = stft_out_13_cast_fp16)[name = tensor<string, []>("op_966_cast_fp16")];
            tensor<int32, [3]> var_969_begin_0 = const()[name = tensor<string, []>("op_969_begin_0"), val = tensor<int32, [3]>([0, 129, 0])];
            tensor<int32, [3]> var_969_end_0 = const()[name = tensor<string, []>("op_969_end_0"), val = tensor<int32, [3]>([1, 258, 4])];
            tensor<bool, [3]> var_969_end_mask_0 = const()[name = tensor<string, []>("op_969_end_mask_0"), val = tensor<bool, [3]>([true, true, true])];
            tensor<fp16, [1, 129, 4]> var_969_cast_fp16 = slice_by_index(begin = var_969_begin_0, end = var_969_end_0, end_mask = var_969_end_mask_0, x = stft_out_13_cast_fp16)[name = tensor<string, []>("op_969_cast_fp16")];
            tensor<fp16, []> var_945_promoted_to_fp16 = const()[name = tensor<string, []>("op_945_promoted_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_971_cast_fp16 = pow(x = var_966_cast_fp16, y = var_945_promoted_to_fp16)[name = tensor<string, []>("op_971_cast_fp16")];
            tensor<fp16, []> var_945_promoted_1_to_fp16 = const()[name = tensor<string, []>("op_945_promoted_1_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_972_cast_fp16 = pow(x = var_969_cast_fp16, y = var_945_promoted_1_to_fp16)[name = tensor<string, []>("op_972_cast_fp16")];
            tensor<fp16, [1, 129, 4]> var_973_cast_fp16 = add(x = var_971_cast_fp16, y = var_972_cast_fp16)[name = tensor<string, []>("op_973_cast_fp16")];
            tensor<fp16, []> var_974_to_fp16 = const()[name = tensor<string, []>("op_974_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 129, 4]> var_975_cast_fp16 = add(x = var_973_cast_fp16, y = var_974_to_fp16)[name = tensor<string, []>("op_975_cast_fp16")];
            tensor<fp16, [1, 129, 4]> input_171_cast_fp16 = sqrt(x = var_975_cast_fp16)[name = tensor<string, []>("input_171_cast_fp16")];
            tensor<string, []> input_173_pad_type_0 = const()[name = tensor<string, []>("input_173_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_173_pad_0 = const()[name = tensor<string, []>("input_173_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_173_strides_0 = const()[name = tensor<string, []>("input_173_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_173_dilations_0 = const()[name = tensor<string, []>("input_173_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_173_groups_0 = const()[name = tensor<string, []>("input_173_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 4]> input_173_cast_fp16 = conv(bias = encoder_layers_0_bias_to_fp16, dilations = input_173_dilations_0, groups = input_173_groups_0, pad = input_173_pad_0, pad_type = input_173_pad_type_0, strides = input_173_strides_0, weight = encoder_layers_0_weight_to_fp16, x = input_171_cast_fp16)[name = tensor<string, []>("input_173_cast_fp16")];
            tensor<fp16, [1, 128, 4]> x_89_cast_fp16 = relu(x = input_173_cast_fp16)[name = tensor<string, []>("x_89_cast_fp16")];
            tensor<fp16, []> const_31_to_fp16 = const()[name = tensor<string, []>("const_31_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, []> var_978_to_fp16 = const()[name = tensor<string, []>("op_978_to_fp16"), val = tensor<fp16, []>(0x1.388p+13)];
            tensor<fp16, [1, 128, 4]> clip_24_cast_fp16 = clip(alpha = const_31_to_fp16, beta = var_978_to_fp16, x = x_89_cast_fp16)[name = tensor<string, []>("clip_24_cast_fp16")];
            tensor<string, []> input_177_pad_type_0 = const()[name = tensor<string, []>("input_177_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_177_pad_0 = const()[name = tensor<string, []>("input_177_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_177_strides_0 = const()[name = tensor<string, []>("input_177_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_177_dilations_0 = const()[name = tensor<string, []>("input_177_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_177_groups_0 = const()[name = tensor<string, []>("input_177_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 2]> input_177_cast_fp16 = conv(bias = encoder_layers_2_bias_to_fp16, dilations = input_177_dilations_0, groups = input_177_groups_0, pad = input_177_pad_0, pad_type = input_177_pad_type_0, strides = input_177_strides_0, weight = encoder_layers_2_weight_to_fp16, x = clip_24_cast_fp16)[name = tensor<string, []>("input_177_cast_fp16")];
            tensor<fp16, [1, 64, 2]> x_91_cast_fp16 = relu(x = input_177_cast_fp16)[name = tensor<string, []>("x_91_cast_fp16")];
            tensor<fp16, []> const_32_to_fp16 = const()[name = tensor<string, []>("const_32_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 2]> clip_25_cast_fp16 = clip(alpha = const_32_to_fp16, beta = var_978_to_fp16, x = x_91_cast_fp16)[name = tensor<string, []>("clip_25_cast_fp16")];
            tensor<string, []> input_181_pad_type_0 = const()[name = tensor<string, []>("input_181_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_181_pad_0 = const()[name = tensor<string, []>("input_181_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_181_strides_0 = const()[name = tensor<string, []>("input_181_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_181_dilations_0 = const()[name = tensor<string, []>("input_181_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_181_groups_0 = const()[name = tensor<string, []>("input_181_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1]> input_181_cast_fp16 = conv(bias = encoder_layers_4_bias_to_fp16, dilations = input_181_dilations_0, groups = input_181_groups_0, pad = input_181_pad_0, pad_type = input_181_pad_type_0, strides = input_181_strides_0, weight = encoder_layers_4_weight_to_fp16, x = clip_25_cast_fp16)[name = tensor<string, []>("input_181_cast_fp16")];
            tensor<fp16, [1, 64, 1]> x_93_cast_fp16 = relu(x = input_181_cast_fp16)[name = tensor<string, []>("x_93_cast_fp16")];
            tensor<fp16, []> const_33_to_fp16 = const()[name = tensor<string, []>("const_33_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 1]> clip_26_cast_fp16 = clip(alpha = const_33_to_fp16, beta = var_978_to_fp16, x = x_93_cast_fp16)[name = tensor<string, []>("clip_26_cast_fp16")];
            tensor<string, []> input_185_pad_type_0 = const()[name = tensor<string, []>("input_185_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_185_pad_0 = const()[name = tensor<string, []>("input_185_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_185_strides_0 = const()[name = tensor<string, []>("input_185_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_185_dilations_0 = const()[name = tensor<string, []>("input_185_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_185_groups_0 = const()[name = tensor<string, []>("input_185_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 1]> input_185_cast_fp16 = conv(bias = encoder_layers_6_bias_to_fp16, dilations = input_185_dilations_0, groups = input_185_groups_0, pad = input_185_pad_0, pad_type = input_185_pad_type_0, strides = input_185_strides_0, weight = encoder_layers_6_weight_to_fp16, x = clip_26_cast_fp16)[name = tensor<string, []>("input_185_cast_fp16")];
            tensor<fp16, [1, 128, 1]> x_95_cast_fp16 = relu(x = input_185_cast_fp16)[name = tensor<string, []>("x_95_cast_fp16")];
            tensor<fp16, []> const_34_to_fp16 = const()[name = tensor<string, []>("const_34_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 128, 1]> clip_27_cast_fp16 = clip(alpha = const_34_to_fp16, beta = var_978_to_fp16, x = x_95_cast_fp16)[name = tensor<string, []>("clip_27_cast_fp16")];
            tensor<int32, [3]> transpose_12_perm_0 = const()[name = tensor<string, []>("transpose_12_perm_0"), val = tensor<int32, [3]>([2, 0, 1])];
            tensor<string, []> transpose_12_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("transpose_12_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_13_batch_first_lstm_h0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_13_batch_first_lstm_h0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_13_batch_first_lstm_h0_squeeze_cast_fp16 = squeeze(axes = lstm_out_13_batch_first_lstm_h0_squeeze_axes_0, x = hn_11_cast_fp16)[name = tensor<string, []>("lstm_out_13_batch_first_lstm_h0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_13_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_13_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_13_batch_first_lstm_c0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_13_batch_first_lstm_c0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_13_batch_first_lstm_c0_squeeze_cast_fp16 = squeeze(axes = lstm_out_13_batch_first_lstm_c0_squeeze_axes_0, x = cn_11_cast_fp16)[name = tensor<string, []>("lstm_out_13_batch_first_lstm_c0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_13_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_13_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<string, []> lstm_out_13_batch_first_direction_0 = const()[name = tensor<string, []>("lstm_out_13_batch_first_direction_0"), val = tensor<string, []>("forward")];
            tensor<bool, []> lstm_out_13_batch_first_output_sequence_0 = const()[name = tensor<string, []>("lstm_out_13_batch_first_output_sequence_0"), val = tensor<bool, []>(true)];
            tensor<string, []> lstm_out_13_batch_first_recurrent_activation_0 = const()[name = tensor<string, []>("lstm_out_13_batch_first_recurrent_activation_0"), val = tensor<string, []>("sigmoid")];
            tensor<string, []> lstm_out_13_batch_first_cell_activation_0 = const()[name = tensor<string, []>("lstm_out_13_batch_first_cell_activation_0"), val = tensor<string, []>("tanh")];
            tensor<string, []> lstm_out_13_batch_first_activation_0 = const()[name = tensor<string, []>("lstm_out_13_batch_first_activation_0"), val = tensor<string, []>("tanh")];
            tensor<fp32, [1, 128]> lstm_out_13_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_13_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_13_batch_first_lstm_c0_squeeze_cast_fp16)[name = tensor<string, []>("cast_12")];
            tensor<fp32, [1, 128]> lstm_out_13_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_13_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_13_batch_first_lstm_h0_squeeze_cast_fp16)[name = tensor<string, []>("cast_13")];
            tensor<fp16, [1, 1, 128]> transpose_12_cast_fp16 = transpose(perm = transpose_12_perm_0, x = clip_27_cast_fp16)[name = tensor<string, []>("transpose_19")];
            tensor<fp32, [1, 1, 128]> transpose_12_cast_fp16_to_fp32 = cast(dtype = transpose_12_cast_fp16_to_fp32_dtype_0, x = transpose_12_cast_fp16)[name = tensor<string, []>("cast_14")];
            tensor<fp32, [1, 1, 128]> lstm_out_13_batch_first_0, tensor<fp32, [1, 128]> lstm_out_13_batch_first_1, tensor<fp32, [1, 128]> lstm_out_13_batch_first_2 = lstm(activation = lstm_out_13_batch_first_activation_0, bias = concat_0, cell_activation = lstm_out_13_batch_first_cell_activation_0, direction = lstm_out_13_batch_first_direction_0, initial_c = lstm_out_13_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32, initial_h = lstm_out_13_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32, output_sequence = lstm_out_13_batch_first_output_sequence_0, recurrent_activation = lstm_out_13_batch_first_recurrent_activation_0, weight_hh = concat_2, weight_ih = concat_1, x = transpose_12_cast_fp16_to_fp32)[name = tensor<string, []>("lstm_out_13_batch_first")];
            tensor<int32, [3]> transpose_13_perm_0 = const()[name = tensor<string, []>("transpose_13_perm_0"), val = tensor<int32, [3]>([1, 2, 0])];
            tensor<string, []> lstm_out_13_batch_first_0_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_13_batch_first_0_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<int32, [1]> hn_13_axes_0 = const()[name = tensor<string, []>("hn_13_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_13_batch_first_1_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_13_batch_first_1_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_13_batch_first_1_to_fp16 = cast(dtype = lstm_out_13_batch_first_1_to_fp16_dtype_0, x = lstm_out_13_batch_first_1)[name = tensor<string, []>("cast_10")];
            tensor<fp16, [1, 1, 128]> hn_13_cast_fp16 = expand_dims(axes = hn_13_axes_0, x = lstm_out_13_batch_first_1_to_fp16)[name = tensor<string, []>("hn_13_cast_fp16")];
            tensor<int32, [1]> cn_13_axes_0 = const()[name = tensor<string, []>("cn_13_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_13_batch_first_2_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_13_batch_first_2_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_13_batch_first_2_to_fp16 = cast(dtype = lstm_out_13_batch_first_2_to_fp16_dtype_0, x = lstm_out_13_batch_first_2)[name = tensor<string, []>("cast_9")];
            tensor<fp16, [1, 1, 128]> cn_13_cast_fp16 = expand_dims(axes = cn_13_axes_0, x = lstm_out_13_batch_first_2_to_fp16)[name = tensor<string, []>("cn_13_cast_fp16")];
            tensor<fp16, [1, 1, 128]> lstm_out_13_batch_first_0_to_fp16 = cast(dtype = lstm_out_13_batch_first_0_to_fp16_dtype_0, x = lstm_out_13_batch_first_0)[name = tensor<string, []>("cast_11")];
            tensor<fp16, [1, 128, 1]> transpose_13_cast_fp16 = transpose(perm = transpose_13_perm_0, x = lstm_out_13_batch_first_0_to_fp16)[name = tensor<string, []>("transpose_18")];
            tensor<fp16, [1, 128, 1]> input_193_cast_fp16 = relu(x = transpose_13_cast_fp16)[name = tensor<string, []>("input_193_cast_fp16")];
            tensor<string, []> input_195_pad_type_0 = const()[name = tensor<string, []>("input_195_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> input_195_strides_0 = const()[name = tensor<string, []>("input_195_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [2]> input_195_pad_0 = const()[name = tensor<string, []>("input_195_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> input_195_dilations_0 = const()[name = tensor<string, []>("input_195_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_195_groups_0 = const()[name = tensor<string, []>("input_195_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 1, 1]> input_195_cast_fp16 = conv(bias = decoder_final_conv_bias_to_fp16, dilations = input_195_dilations_0, groups = input_195_groups_0, pad = input_195_pad_0, pad_type = input_195_pad_type_0, strides = input_195_strides_0, weight = decoder_final_conv_weight_to_fp16, x = input_193_cast_fp16)[name = tensor<string, []>("input_195_cast_fp16")];
            tensor<fp16, [1, 1, 1]> var_1062_cast_fp16 = sigmoid(x = input_195_cast_fp16)[name = tensor<string, []>("op_1062_cast_fp16")];
            tensor<int32, [4]> x_99_pad_0 = const()[name = tensor<string, []>("x_99_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 64])];
            tensor<string, []> x_99_mode_0 = const()[name = tensor<string, []>("x_99_mode_0"), val = tensor<string, []>("reflect")];
            tensor<fp16, []> const_35_to_fp16 = const()[name = tensor<string, []>("const_35_to_fp16"), val = tensor<fp16, []>(0x0p+0)];
            tensor<fp16, [1, 640]> x_99_cast_fp16 = pad(constant_val = const_35_to_fp16, mode = x_99_mode_0, pad = x_99_pad_0, x = input_197_cast_fp16)[name = tensor<string, []>("x_99_cast_fp16")];
            tensor<int32, [1]> x_101_axes_0 = const()[name = tensor<string, []>("x_101_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 640]> x_101_cast_fp16 = expand_dims(axes = x_101_axes_0, x = x_99_cast_fp16)[name = tensor<string, []>("x_101_cast_fp16")];
            tensor<string, []> stft_out_pad_type_0 = const()[name = tensor<string, []>("stft_out_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> stft_out_strides_0 = const()[name = tensor<string, []>("stft_out_strides_0"), val = tensor<int32, [1]>([128])];
            tensor<int32, [2]> stft_out_pad_0 = const()[name = tensor<string, []>("stft_out_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> stft_out_dilations_0 = const()[name = tensor<string, []>("stft_out_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> stft_out_groups_0 = const()[name = tensor<string, []>("stft_out_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 258, 4]> stft_out_cast_fp16 = conv(dilations = stft_out_dilations_0, groups = stft_out_groups_0, pad = stft_out_pad_0, pad_type = stft_out_pad_type_0, strides = stft_out_strides_0, weight = stft_forward_basis_to_fp16, x = x_101_cast_fp16)[name = tensor<string, []>("stft_out_cast_fp16")];
            tensor<int32, [3]> var_1090_begin_0 = const()[name = tensor<string, []>("op_1090_begin_0"), val = tensor<int32, [3]>([0, 0, 0])];
            tensor<int32, [3]> var_1090_end_0 = const()[name = tensor<string, []>("op_1090_end_0"), val = tensor<int32, [3]>([1, 129, 4])];
            tensor<bool, [3]> var_1090_end_mask_0 = const()[name = tensor<string, []>("op_1090_end_mask_0"), val = tensor<bool, [3]>([true, false, true])];
            tensor<fp16, [1, 129, 4]> var_1090_cast_fp16 = slice_by_index(begin = var_1090_begin_0, end = var_1090_end_0, end_mask = var_1090_end_mask_0, x = stft_out_cast_fp16)[name = tensor<string, []>("op_1090_cast_fp16")];
            tensor<int32, [3]> var_1093_begin_0 = const()[name = tensor<string, []>("op_1093_begin_0"), val = tensor<int32, [3]>([0, 129, 0])];
            tensor<int32, [3]> var_1093_end_0 = const()[name = tensor<string, []>("op_1093_end_0"), val = tensor<int32, [3]>([1, 258, 4])];
            tensor<bool, [3]> var_1093_end_mask_0 = const()[name = tensor<string, []>("op_1093_end_mask_0"), val = tensor<bool, [3]>([true, true, true])];
            tensor<fp16, [1, 129, 4]> var_1093_cast_fp16 = slice_by_index(begin = var_1093_begin_0, end = var_1093_end_0, end_mask = var_1093_end_mask_0, x = stft_out_cast_fp16)[name = tensor<string, []>("op_1093_cast_fp16")];
            tensor<fp16, []> var_1069_promoted_to_fp16 = const()[name = tensor<string, []>("op_1069_promoted_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_1095_cast_fp16 = pow(x = var_1090_cast_fp16, y = var_1069_promoted_to_fp16)[name = tensor<string, []>("op_1095_cast_fp16")];
            tensor<fp16, []> var_1069_promoted_1_to_fp16 = const()[name = tensor<string, []>("op_1069_promoted_1_to_fp16"), val = tensor<fp16, []>(0x1p+1)];
            tensor<fp16, [1, 129, 4]> var_1096_cast_fp16 = pow(x = var_1093_cast_fp16, y = var_1069_promoted_1_to_fp16)[name = tensor<string, []>("op_1096_cast_fp16")];
            tensor<fp16, [1, 129, 4]> var_1097_cast_fp16 = add(x = var_1095_cast_fp16, y = var_1096_cast_fp16)[name = tensor<string, []>("op_1097_cast_fp16")];
            tensor<fp16, []> var_1098_to_fp16 = const()[name = tensor<string, []>("op_1098_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 129, 4]> var_1099_cast_fp16 = add(x = var_1097_cast_fp16, y = var_1098_to_fp16)[name = tensor<string, []>("op_1099_cast_fp16")];
            tensor<fp16, [1, 129, 4]> input_199_cast_fp16 = sqrt(x = var_1099_cast_fp16)[name = tensor<string, []>("input_199_cast_fp16")];
            tensor<string, []> input_201_pad_type_0 = const()[name = tensor<string, []>("input_201_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_201_pad_0 = const()[name = tensor<string, []>("input_201_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_201_strides_0 = const()[name = tensor<string, []>("input_201_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_201_dilations_0 = const()[name = tensor<string, []>("input_201_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_201_groups_0 = const()[name = tensor<string, []>("input_201_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 4]> input_201_cast_fp16 = conv(bias = encoder_layers_0_bias_to_fp16, dilations = input_201_dilations_0, groups = input_201_groups_0, pad = input_201_pad_0, pad_type = input_201_pad_type_0, strides = input_201_strides_0, weight = encoder_layers_0_weight_to_fp16, x = input_199_cast_fp16)[name = tensor<string, []>("input_201_cast_fp16")];
            tensor<fp16, [1, 128, 4]> x_103_cast_fp16 = relu(x = input_201_cast_fp16)[name = tensor<string, []>("x_103_cast_fp16")];
            tensor<fp16, []> const_36_to_fp16 = const()[name = tensor<string, []>("const_36_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, []> var_1102_to_fp16 = const()[name = tensor<string, []>("op_1102_to_fp16"), val = tensor<fp16, []>(0x1.388p+13)];
            tensor<fp16, [1, 128, 4]> clip_28_cast_fp16 = clip(alpha = const_36_to_fp16, beta = var_1102_to_fp16, x = x_103_cast_fp16)[name = tensor<string, []>("clip_28_cast_fp16")];
            tensor<string, []> input_205_pad_type_0 = const()[name = tensor<string, []>("input_205_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_205_pad_0 = const()[name = tensor<string, []>("input_205_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_205_strides_0 = const()[name = tensor<string, []>("input_205_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_205_dilations_0 = const()[name = tensor<string, []>("input_205_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_205_groups_0 = const()[name = tensor<string, []>("input_205_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 2]> input_205_cast_fp16 = conv(bias = encoder_layers_2_bias_to_fp16, dilations = input_205_dilations_0, groups = input_205_groups_0, pad = input_205_pad_0, pad_type = input_205_pad_type_0, strides = input_205_strides_0, weight = encoder_layers_2_weight_to_fp16, x = clip_28_cast_fp16)[name = tensor<string, []>("input_205_cast_fp16")];
            tensor<fp16, [1, 64, 2]> x_105_cast_fp16 = relu(x = input_205_cast_fp16)[name = tensor<string, []>("x_105_cast_fp16")];
            tensor<fp16, []> const_37_to_fp16 = const()[name = tensor<string, []>("const_37_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 2]> clip_29_cast_fp16 = clip(alpha = const_37_to_fp16, beta = var_1102_to_fp16, x = x_105_cast_fp16)[name = tensor<string, []>("clip_29_cast_fp16")];
            tensor<string, []> input_209_pad_type_0 = const()[name = tensor<string, []>("input_209_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_209_pad_0 = const()[name = tensor<string, []>("input_209_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_209_strides_0 = const()[name = tensor<string, []>("input_209_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> input_209_dilations_0 = const()[name = tensor<string, []>("input_209_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_209_groups_0 = const()[name = tensor<string, []>("input_209_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1]> input_209_cast_fp16 = conv(bias = encoder_layers_4_bias_to_fp16, dilations = input_209_dilations_0, groups = input_209_groups_0, pad = input_209_pad_0, pad_type = input_209_pad_type_0, strides = input_209_strides_0, weight = encoder_layers_4_weight_to_fp16, x = clip_29_cast_fp16)[name = tensor<string, []>("input_209_cast_fp16")];
            tensor<fp16, [1, 64, 1]> x_107_cast_fp16 = relu(x = input_209_cast_fp16)[name = tensor<string, []>("x_107_cast_fp16")];
            tensor<fp16, []> const_38_to_fp16 = const()[name = tensor<string, []>("const_38_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 64, 1]> clip_30_cast_fp16 = clip(alpha = const_38_to_fp16, beta = var_1102_to_fp16, x = x_107_cast_fp16)[name = tensor<string, []>("clip_30_cast_fp16")];
            tensor<string, []> input_213_pad_type_0 = const()[name = tensor<string, []>("input_213_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_213_pad_0 = const()[name = tensor<string, []>("input_213_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> input_213_strides_0 = const()[name = tensor<string, []>("input_213_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> input_213_dilations_0 = const()[name = tensor<string, []>("input_213_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_213_groups_0 = const()[name = tensor<string, []>("input_213_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 128, 1]> input_213_cast_fp16 = conv(bias = encoder_layers_6_bias_to_fp16, dilations = input_213_dilations_0, groups = input_213_groups_0, pad = input_213_pad_0, pad_type = input_213_pad_type_0, strides = input_213_strides_0, weight = encoder_layers_6_weight_to_fp16, x = clip_30_cast_fp16)[name = tensor<string, []>("input_213_cast_fp16")];
            tensor<fp16, [1, 128, 1]> x_109_cast_fp16 = relu(x = input_213_cast_fp16)[name = tensor<string, []>("x_109_cast_fp16")];
            tensor<fp16, []> const_39_to_fp16 = const()[name = tensor<string, []>("const_39_to_fp16"), val = tensor<fp16, []>(-inf)];
            tensor<fp16, [1, 128, 1]> clip_31_cast_fp16 = clip(alpha = const_39_to_fp16, beta = var_1102_to_fp16, x = x_109_cast_fp16)[name = tensor<string, []>("clip_31_cast_fp16")];
            tensor<int32, [3]> transpose_14_perm_0 = const()[name = tensor<string, []>("transpose_14_perm_0"), val = tensor<int32, [3]>([2, 0, 1])];
            tensor<string, []> transpose_14_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("transpose_14_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_batch_first_lstm_h0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_batch_first_lstm_h0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_batch_first_lstm_h0_squeeze_cast_fp16 = squeeze(axes = lstm_out_batch_first_lstm_h0_squeeze_axes_0, x = hn_13_cast_fp16)[name = tensor<string, []>("lstm_out_batch_first_lstm_h0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> lstm_out_batch_first_lstm_c0_squeeze_axes_0 = const()[name = tensor<string, []>("lstm_out_batch_first_lstm_c0_squeeze_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> lstm_out_batch_first_lstm_c0_squeeze_cast_fp16 = squeeze(axes = lstm_out_batch_first_lstm_c0_squeeze_axes_0, x = cn_13_cast_fp16)[name = tensor<string, []>("lstm_out_batch_first_lstm_c0_squeeze_cast_fp16")];
            tensor<string, []> lstm_out_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("lstm_out_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<string, []> lstm_out_batch_first_direction_0 = const()[name = tensor<string, []>("lstm_out_batch_first_direction_0"), val = tensor<string, []>("forward")];
            tensor<bool, []> lstm_out_batch_first_output_sequence_0 = const()[name = tensor<string, []>("lstm_out_batch_first_output_sequence_0"), val = tensor<bool, []>(true)];
            tensor<string, []> lstm_out_batch_first_recurrent_activation_0 = const()[name = tensor<string, []>("lstm_out_batch_first_recurrent_activation_0"), val = tensor<string, []>("sigmoid")];
            tensor<string, []> lstm_out_batch_first_cell_activation_0 = const()[name = tensor<string, []>("lstm_out_batch_first_cell_activation_0"), val = tensor<string, []>("tanh")];
            tensor<string, []> lstm_out_batch_first_activation_0 = const()[name = tensor<string, []>("lstm_out_batch_first_activation_0"), val = tensor<string, []>("tanh")];
            tensor<fp32, [1, 128]> lstm_out_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_batch_first_lstm_c0_squeeze_cast_fp16)[name = tensor<string, []>("cast_6")];
            tensor<fp32, [1, 128]> lstm_out_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32 = cast(dtype = lstm_out_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32_dtype_0, x = lstm_out_batch_first_lstm_h0_squeeze_cast_fp16)[name = tensor<string, []>("cast_7")];
            tensor<fp16, [1, 1, 128]> transpose_14_cast_fp16 = transpose(perm = transpose_14_perm_0, x = clip_31_cast_fp16)[name = tensor<string, []>("transpose_17")];
            tensor<fp32, [1, 1, 128]> transpose_14_cast_fp16_to_fp32 = cast(dtype = transpose_14_cast_fp16_to_fp32_dtype_0, x = transpose_14_cast_fp16)[name = tensor<string, []>("cast_8")];
            tensor<fp32, [1, 1, 128]> lstm_out_batch_first_0, tensor<fp32, [1, 128]> lstm_out_batch_first_1, tensor<fp32, [1, 128]> lstm_out_batch_first_2 = lstm(activation = lstm_out_batch_first_activation_0, bias = concat_0, cell_activation = lstm_out_batch_first_cell_activation_0, direction = lstm_out_batch_first_direction_0, initial_c = lstm_out_batch_first_lstm_c0_squeeze_cast_fp16_to_fp32, initial_h = lstm_out_batch_first_lstm_h0_squeeze_cast_fp16_to_fp32, output_sequence = lstm_out_batch_first_output_sequence_0, recurrent_activation = lstm_out_batch_first_recurrent_activation_0, weight_hh = concat_2, weight_ih = concat_1, x = transpose_14_cast_fp16_to_fp32)[name = tensor<string, []>("lstm_out_batch_first")];
            tensor<int32, [3]> transpose_15_perm_0 = const()[name = tensor<string, []>("transpose_15_perm_0"), val = tensor<int32, [3]>([1, 2, 0])];
            tensor<string, []> lstm_out_batch_first_0_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_batch_first_0_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<int32, [1]> hn_axes_0 = const()[name = tensor<string, []>("hn_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_batch_first_1_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_batch_first_1_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_batch_first_1_to_fp16 = cast(dtype = lstm_out_batch_first_1_to_fp16_dtype_0, x = lstm_out_batch_first_1)[name = tensor<string, []>("cast_4")];
            tensor<fp16, [1, 1, 128]> hn_cast_fp16 = expand_dims(axes = hn_axes_0, x = lstm_out_batch_first_1_to_fp16)[name = tensor<string, []>("hn_cast_fp16")];
            tensor<int32, [1]> cn_axes_0 = const()[name = tensor<string, []>("cn_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<string, []> lstm_out_batch_first_2_to_fp16_dtype_0 = const()[name = tensor<string, []>("lstm_out_batch_first_2_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [1, 128]> lstm_out_batch_first_2_to_fp16 = cast(dtype = lstm_out_batch_first_2_to_fp16_dtype_0, x = lstm_out_batch_first_2)[name = tensor<string, []>("cast_3")];
            tensor<fp16, [1, 1, 128]> cn_cast_fp16 = expand_dims(axes = cn_axes_0, x = lstm_out_batch_first_2_to_fp16)[name = tensor<string, []>("cn_cast_fp16")];
            tensor<fp16, [1, 1, 128]> lstm_out_batch_first_0_to_fp16 = cast(dtype = lstm_out_batch_first_0_to_fp16_dtype_0, x = lstm_out_batch_first_0)[name = tensor<string, []>("cast_5")];
            tensor<fp16, [1, 128, 1]> transpose_15_cast_fp16 = transpose(perm = transpose_15_perm_0, x = lstm_out_batch_first_0_to_fp16)[name = tensor<string, []>("transpose_16")];
            tensor<fp16, [1, 128, 1]> input_221_cast_fp16 = relu(x = transpose_15_cast_fp16)[name = tensor<string, []>("input_221_cast_fp16")];
            tensor<string, []> input_pad_type_0 = const()[name = tensor<string, []>("input_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> input_strides_0 = const()[name = tensor<string, []>("input_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [2]> input_pad_0 = const()[name = tensor<string, []>("input_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> input_dilations_0 = const()[name = tensor<string, []>("input_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_groups_0 = const()[name = tensor<string, []>("input_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 1, 1]> input_cast_fp16 = conv(bias = decoder_final_conv_bias_to_fp16, dilations = input_dilations_0, groups = input_groups_0, pad = input_pad_0, pad_type = input_pad_type_0, strides = input_strides_0, weight = decoder_final_conv_weight_to_fp16, x = input_221_cast_fp16)[name = tensor<string, []>("input_cast_fp16")];
            tensor<fp16, [1, 1, 1]> vad_out_cast_fp16 = sigmoid(x = input_cast_fp16)[name = tensor<string, []>("vad_out_cast_fp16")];
            tensor<int32, [1]> var_1187_axes_0 = const()[name = tensor<string, []>("op_1187_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> var_1187_cast_fp16 = squeeze(axes = var_1187_axes_0, x = hn_cast_fp16)[name = tensor<string, []>("op_1187_cast_fp16")];
            tensor<string, []> var_1187_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_1187_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, [1]> var_1188_axes_0 = const()[name = tensor<string, []>("op_1188_axes_0"), val = tensor<int32, [1]>([0])];
            tensor<fp16, [1, 128]> var_1188_cast_fp16 = squeeze(axes = var_1188_axes_0, x = cn_cast_fp16)[name = tensor<string, []>("op_1188_cast_fp16")];
            tensor<string, []> var_1188_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_1188_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<int32, []> var_1194 = const()[name = tensor<string, []>("op_1194"), val = tensor<int32, []>(2)];
            tensor<bool, []> var_1195_interleave_0 = const()[name = tensor<string, []>("op_1195_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 1, 8]> var_1195_cast_fp16 = concat(axis = var_1194, interleave = var_1195_interleave_0, values = (var_318_cast_fp16, var_442_cast_fp16, var_566_cast_fp16, var_690_cast_fp16, var_814_cast_fp16, var_938_cast_fp16, var_1062_cast_fp16, vad_out_cast_fp16))[name = tensor<string, []>("op_1195_cast_fp16")];
            tensor<fp16, []> var_1196_to_fp16 = const()[name = tensor<string, []>("op_1196_to_fp16"), val = tensor<fp16, []>(0x1p+0)];
            tensor<fp16, [1, 1, 8]> one_minus_probs_cast_fp16 = sub(x = var_1196_to_fp16, y = var_1195_cast_fp16)[name = tensor<string, []>("one_minus_probs_cast_fp16")];
            tensor<int32, [3]> product_1_begin_0 = const()[name = tensor<string, []>("product_1_begin_0"), val = tensor<int32, [3]>([0, 0, 0])];
            tensor<int32, [3]> product_1_end_0 = const()[name = tensor<string, []>("product_1_end_0"), val = tensor<int32, [3]>([1, 1, 1])];
            tensor<bool, [3]> product_1_end_mask_0 = const()[name = tensor<string, []>("product_1_end_mask_0"), val = tensor<bool, [3]>([true, true, false])];
            tensor<fp16, [1, 1, 1]> product_1_cast_fp16 = slice_by_index(begin = product_1_begin_0, end = product_1_end_0, end_mask = product_1_end_mask_0, x = one_minus_probs_cast_fp16)[name = tensor<string, []>("product_1_cast_fp16")];
            tensor<int32, [3]> var_1228_begin_0 = const()[name = tensor<string, []>("op_1228_begin_0"), val = tensor<int32, [3]>([0, 0, 1])];
            tensor<int32, [3]> var_1228_end_0 = const()[name = tensor<string, []>("op_1228_end_0"), val = tensor<int32, [3]>([1, 1, 2])];
            tensor<bool, [3]> var_1228_end_mask_0 = const()[name = tensor<string, []>("op_1228_end_mask_0"), val = tensor<bool, [3]>([true, true, false])];
            tensor<fp16, [1, 1, 1]> var_1228_cast_fp16 = slice_by_index(begin = var_1228_begin_0, end = var_1228_end_0, end_mask = var_1228_end_mask_0, x = one_minus_probs_cast_fp16)[name = tensor<string, []>("op_1228_cast_fp16")];
            tensor<fp16, [1, 1, 1]> product_3_cast_fp16 = mul(x = product_1_cast_fp16, y = var_1228_cast_fp16)[name = tensor<string, []>("product_3_cast_fp16")];
            tensor<int32, [3]> var_1244_begin_0 = const()[name = tensor<string, []>("op_1244_begin_0"), val = tensor<int32, [3]>([0, 0, 2])];
            tensor<int32, [3]> var_1244_end_0 = const()[name = tensor<string, []>("op_1244_end_0"), val = tensor<int32, [3]>([1, 1, 3])];
            tensor<bool, [3]> var_1244_end_mask_0 = const()[name = tensor<string, []>("op_1244_end_mask_0"), val = tensor<bool, [3]>([true, true, false])];
            tensor<fp16, [1, 1, 1]> var_1244_cast_fp16 = slice_by_index(begin = var_1244_begin_0, end = var_1244_end_0, end_mask = var_1244_end_mask_0, x = one_minus_probs_cast_fp16)[name = tensor<string, []>("op_1244_cast_fp16")];
            tensor<fp16, [1, 1, 1]> product_5_cast_fp16 = mul(x = product_3_cast_fp16, y = var_1244_cast_fp16)[name = tensor<string, []>("product_5_cast_fp16")];
            tensor<int32, [3]> var_1260_begin_0 = const()[name = tensor<string, []>("op_1260_begin_0"), val = tensor<int32, [3]>([0, 0, 3])];
            tensor<int32, [3]> var_1260_end_0 = const()[name = tensor<string, []>("op_1260_end_0"), val = tensor<int32, [3]>([1, 1, 4])];
            tensor<bool, [3]> var_1260_end_mask_0 = const()[name = tensor<string, []>("op_1260_end_mask_0"), val = tensor<bool, [3]>([true, true, false])];
            tensor<fp16, [1, 1, 1]> var_1260_cast_fp16 = slice_by_index(begin = var_1260_begin_0, end = var_1260_end_0, end_mask = var_1260_end_mask_0, x = one_minus_probs_cast_fp16)[name = tensor<string, []>("op_1260_cast_fp16")];
            tensor<fp16, [1, 1, 1]> product_7_cast_fp16 = mul(x = product_5_cast_fp16, y = var_1260_cast_fp16)[name = tensor<string, []>("product_7_cast_fp16")];
            tensor<int32, [3]> var_1276_begin_0 = const()[name = tensor<string, []>("op_1276_begin_0"), val = tensor<int32, [3]>([0, 0, 4])];
            tensor<int32, [3]> var_1276_end_0 = const()[name = tensor<string, []>("op_1276_end_0"), val = tensor<int32, [3]>([1, 1, 5])];
            tensor<bool, [3]> var_1276_end_mask_0 = const()[name = tensor<string, []>("op_1276_end_mask_0"), val = tensor<bool, [3]>([true, true, false])];
            tensor<fp16, [1, 1, 1]> var_1276_cast_fp16 = slice_by_index(begin = var_1276_begin_0, end = var_1276_end_0, end_mask = var_1276_end_mask_0, x = one_minus_probs_cast_fp16)[name = tensor<string, []>("op_1276_cast_fp16")];
            tensor<fp16, [1, 1, 1]> product_9_cast_fp16 = mul(x = product_7_cast_fp16, y = var_1276_cast_fp16)[name = tensor<string, []>("product_9_cast_fp16")];
            tensor<int32, [3]> var_1292_begin_0 = const()[name = tensor<string, []>("op_1292_begin_0"), val = tensor<int32, [3]>([0, 0, 5])];
            tensor<int32, [3]> var_1292_end_0 = const()[name = tensor<string, []>("op_1292_end_0"), val = tensor<int32, [3]>([1, 1, 6])];
            tensor<bool, [3]> var_1292_end_mask_0 = const()[name = tensor<string, []>("op_1292_end_mask_0"), val = tensor<bool, [3]>([true, true, false])];
            tensor<fp16, [1, 1, 1]> var_1292_cast_fp16 = slice_by_index(begin = var_1292_begin_0, end = var_1292_end_0, end_mask = var_1292_end_mask_0, x = one_minus_probs_cast_fp16)[name = tensor<string, []>("op_1292_cast_fp16")];
            tensor<fp16, [1, 1, 1]> product_11_cast_fp16 = mul(x = product_9_cast_fp16, y = var_1292_cast_fp16)[name = tensor<string, []>("product_11_cast_fp16")];
            tensor<int32, [3]> var_1308_begin_0 = const()[name = tensor<string, []>("op_1308_begin_0"), val = tensor<int32, [3]>([0, 0, 6])];
            tensor<int32, [3]> var_1308_end_0 = const()[name = tensor<string, []>("op_1308_end_0"), val = tensor<int32, [3]>([1, 1, 7])];
            tensor<bool, [3]> var_1308_end_mask_0 = const()[name = tensor<string, []>("op_1308_end_mask_0"), val = tensor<bool, [3]>([true, true, false])];
            tensor<fp16, [1, 1, 1]> var_1308_cast_fp16 = slice_by_index(begin = var_1308_begin_0, end = var_1308_end_0, end_mask = var_1308_end_mask_0, x = one_minus_probs_cast_fp16)[name = tensor<string, []>("op_1308_cast_fp16")];
            tensor<fp16, [1, 1, 1]> product_cast_fp16 = mul(x = product_11_cast_fp16, y = var_1308_cast_fp16)[name = tensor<string, []>("product_cast_fp16")];
            tensor<int32, [3]> var_1324_begin_0 = const()[name = tensor<string, []>("op_1324_begin_0"), val = tensor<int32, [3]>([0, 0, 7])];
            tensor<int32, [3]> var_1324_end_0 = const()[name = tensor<string, []>("op_1324_end_0"), val = tensor<int32, [3]>([1, 1, 1])];
            tensor<bool, [3]> var_1324_end_mask_0 = const()[name = tensor<string, []>("op_1324_end_mask_0"), val = tensor<bool, [3]>([true, true, true])];
            tensor<fp16, [1, 1, 1]> var_1324_cast_fp16 = slice_by_index(begin = var_1324_begin_0, end = var_1324_end_0, end_mask = var_1324_end_mask_0, x = one_minus_probs_cast_fp16)[name = tensor<string, []>("op_1324_cast_fp16")];
            tensor<fp16, [1, 1, 1]> var_1325_cast_fp16 = mul(x = product_cast_fp16, y = var_1324_cast_fp16)[name = tensor<string, []>("op_1325_cast_fp16")];
            tensor<fp16, []> var_1326_to_fp16 = const()[name = tensor<string, []>("op_1326_to_fp16"), val = tensor<fp16, []>(0x1p+0)];
            tensor<fp16, [1, 1, 1]> var_1328_cast_fp16 = sub(x = var_1326_to_fp16, y = var_1325_cast_fp16)[name = tensor<string, []>("op_1328_cast_fp16")];
            tensor<string, []> var_1328_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_1328_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<fp32, [1, 1, 1]> vad_output = cast(dtype = var_1328_cast_fp16_to_fp32_dtype_0, x = var_1328_cast_fp16)[name = tensor<string, []>("cast_0")];
            tensor<fp32, [1, 128]> new_cell_state = cast(dtype = var_1188_cast_fp16_to_fp32_dtype_0, x = var_1188_cast_fp16)[name = tensor<string, []>("cast_1")];
            tensor<fp32, [1, 128]> new_hidden_state = cast(dtype = var_1187_cast_fp16_to_fp32_dtype_0, x = var_1187_cast_fp16)[name = tensor<string, []>("cast_2")];
        } -> (vad_output, new_hidden_state, new_cell_state);
}